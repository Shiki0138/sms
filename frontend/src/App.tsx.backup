import { useState, useEffect } from 'react'
import { 
  MessageSquare, 
  Calendar, 
  Users, 
  BarChart3, 
  Settings,
  Instagram,
  MessageCircle,
  Clock,
  CheckCircle,
  AlertCircle,
  Phone,
  Mail,
  Send,
  Menu,
  X,
  ExternalLink,
  Save,
  Eye,
  EyeOff,
  RefreshCw,
  Link,
  User,
  MapPin,
  Calendar as CalendarIcon,
  FileText,
  ChevronLeft,
  ChevronRight,
  Scissors,
  Palette,
  Star,
  Sparkles,
  LogOut,
  Shield,
  TrendingUp,
  Activity,
  DollarSign,
  UserCheck,
  Search,
  Filter,
  SortAsc,
  SortDesc,
  Bookmark,
  Hash
} from 'lucide-react'
import { useQuery } from '@tanstack/react-query'
import axios from 'axios'
import { format, isToday, isTomorrow, startOfMonth, endOfMonth, subMonths } from 'date-fns'
import { ja } from 'date-fns/locale'
import toast from 'react-hot-toast'
import Login from './components/Login'

const API_BASE_URL = 'http://localhost:8080/api/v1'

interface MessageThread {
  id: string
  customer: {
    id: string
    name: string
    instagramId?: string
    lineId?: string
  }
  channel: 'INSTAGRAM' | 'LINE'
  status: 'OPEN' | 'IN_PROGRESS' | 'CLOSED'
  assignedStaff?: {
    id: string
    name: string
  }
  lastMessage: {
    content: string
    createdAt: string
    senderType: 'CUSTOMER' | 'STAFF'
  }
  unreadCount: number
  tags: string[]
}

interface Customer {
  id: string
  customerNumber: string
  name: string
  phone?: string
  email?: string
  instagramId?: string
  lineId?: string
  notes?: string
  visitCount: number
  lastVisit?: string
  totalSpent: number
  assignedStaff?: string
}

interface Reservation {
  id: string
  customer: {
    id: string
    name: string
    phone?: string
  }
  service: {
    name: string
    duration: number
    price: number
  }
  staff: {
    id: string
    name: string
  }
  startTime: string
  endTime: string
  status: 'CONFIRMED' | 'PENDING' | 'CANCELLED' | 'COMPLETED'
  notes?: string
}

function App() {
  const [activeTab, setActiveTab] = useState('messages')
  const [calendarView, setCalendarView] = useState<'day' | 'threeDay' | 'week' | 'month'>('week')
  const [calendarDate, setCalendarDate] = useState(new Date())
  const [selectedThread, setSelectedThread] = useState<string | null>(null)
  const [replyMessage, setReplyMessage] = useState('')
  const [showReplyForm, setShowReplyForm] = useState<string | null>(null)
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [currentStaff, setCurrentStaff] = useState<any>(null)
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [isBusinessSettingsOpen, setIsBusinessSettingsOpen] = useState(false)

  // Filter states
  const [searchQuery, setSearchQuery] = useState('')
  const [filters, setFilters] = useState({
    status: 'all',
    channel: 'all',
    assignedStaff: 'all',
    unreadOnly: false,
    dateFrom: '',
    dateTo: '',
    sortBy: 'lastMessage',
    sortOrder: 'desc'
  })
  const [savedFilters, setSavedFilters] = useState<any[]>([])

  // Business settings
  const [businessSettings, setBusinessSettings] = useState({
    openHour: 9,
    closeHour: 18,
    timeSlotMinutes: 30,
    closedDays: [0], // Sunday
    customClosedDates: []
  })

  // Google Calendar settings
  const [googleCalendarSettings, setGoogleCalendarSettings] = useState({
    clientId: '',
    clientSecret: '',
    autoSync: false,
    lastSync: null
  })

  // Demo customer registration state
  const [newCustomer, setNewCustomer] = useState({
    name: '',
    phone: '',
    email: '',
    instagramId: '',
    lineId: '',
    notes: ''
  })

  // Handle customer registration
  const handleCustomerRegistration = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      const response = await axios.post(`${API_BASE_URL}/customers`, newCustomer)
      
      if (response.data.success) {
        toast.success('新規顧客を登録しました')
        setNewCustomer({
          name: '',
          phone: '',
          email: '',
          instagramId: '',
          lineId: '',
          notes: ''
        })
        // Refresh customers data
        // queryClient.invalidateQueries(['customers'])
      }
    } catch (error: any) {
      console.error('Customer registration error:', error)
      const errorMessage = error.response?.data?.error || '顧客登録に失敗しました'
      toast.error(errorMessage)
    }
  }

  // Fetch data with filters
  const { data: threadsData } = useQuery({
    queryKey: ['threads', searchQuery, filters],
    queryFn: () => {
      const params = new URLSearchParams();
      if (searchQuery) params.append('search', searchQuery);
      if (filters.status !== 'all') params.append('status', filters.status);
      if (filters.channel !== 'all') params.append('channel', filters.channel);
      if (filters.assignedStaff !== 'all') params.append('assignedStaff', filters.assignedStaff);
      if (filters.unreadOnly) params.append('unreadOnly', 'true');
      if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);
      if (filters.dateTo) params.append('dateTo', filters.dateTo);
      params.append('sortBy', filters.sortBy);
      params.append('sortOrder', filters.sortOrder);
      
      return axios.get(`${API_BASE_URL}/messages/threads?${params.toString()}`).then(res => res.data);
    },
    enabled: isAuthenticated
  })
  
  const threads = threadsData?.threads || []

  const { data: customers } = useQuery<{ customers: Customer[] }>({
    queryKey: ['customers'],
    queryFn: () => axios.get(`${API_BASE_URL}/customers`).then(res => res.data),
    enabled: isAuthenticated
  })

  const { data: reservations } = useQuery<{ reservations: Reservation[] }>({
    queryKey: ['reservations'],
    queryFn: () => axios.get(`${API_BASE_URL}/reservations`).then(res => res.data),
    enabled: isAuthenticated
  })

  const { data: segments } = useQuery({
    queryKey: ['analytics', 'segments'],
    queryFn: () => axios.get(`${API_BASE_URL}/analytics/segments`).then(res => res.data),
    enabled: isAuthenticated
  })

  const { data: menus } = useQuery({
    queryKey: ['menus'],
    queryFn: () => axios.get(`${API_BASE_URL}/menus`).then(res => res.data),
    enabled: isAuthenticated
  })

  const { data: autoMessageTemplates } = useQuery({
    queryKey: ['auto-messages', 'templates'],
    queryFn: () => axios.get(`${API_BASE_URL}/auto-messages/templates`).then(res => res.data),
    enabled: isAuthenticated
  })

  const { data: filterMetadataData } = useQuery({
    queryKey: ['messages', 'filter-metadata'],
    queryFn: () => axios.get(`${API_BASE_URL}/messages/filter-metadata`).then(res => res.data),
    enabled: isAuthenticated
  })

  const { data: savedFiltersData } = useQuery({
    queryKey: ['messages', 'saved-filters'],
    queryFn: () => axios.get(`${API_BASE_URL}/messages/saved-filters`).then(res => res.data),
    enabled: isAuthenticated
  })

  // Update local state when data changes
  useEffect(() => {
    if (filterMetadataData) setFilters(prev => ({ ...prev, ...filterMetadataData }))
    if (savedFiltersData) setSavedFilters(savedFiltersData.filters)
  }, [filterMetadataData, savedFiltersData])

  // Calculate unread count
  const unreadCount = threads?.reduce((sum, t) => sum + t.unreadCount, 0) || 0

  // Handle reply submission
  const handleSendReply = async (threadId: string) => {
    if (!replyMessage.trim()) return

    try {
      await axios.post(`${API_BASE_URL}/messages/threads/${threadId}/reply`, {
        content: replyMessage
      })
      
      setReplyMessage('')
      setShowReplyForm(null)
      toast.success('メッセージを送信しました')
    } catch (error) {
      toast.error('メッセージの送信に失敗しました')
    }
  }

  // Handle broadcast message  
  const handleBroadcast = async () => {
    try {
      const selectedThreadIds = getSelectedThreadIds()
      
      await axios.post(`${API_BASE_URL}/messages/broadcast`, {
        threadIds: selectedThreadIds,
        content: replyMessage
      })
      
      setReplyMessage('')
      toast.success(`${selectedThreadIds.length}件のスレッドにメッセージを送信しました`)
    } catch (error) {
      toast.error('一斉送信に失敗しました')
    }
  }

  const getSelectedThreadIds = () => {
    // Get all thread IDs for demo purposes
    return threads?.map(t => t.id) || []
  }

  // Handle batch reply with personalized content
  const handlePersonalizedBroadcast = async () => {
    try {
      // Demo implementation for personalized messages
      const personalizedMessages = threads?.map(thread => ({
        threadId: thread.id,
        content: `${thread.customer.name}様、${replyMessage}`
      })) || []

      await axios.post(`${API_BASE_URL}/messages/broadcast/personalized`, {
        messages: personalizedMessages
      })

      setReplyMessage('')
      toast.success(`${personalizedMessages.length}件の個別メッセージを送信しました`)
    } catch (error) {
      toast.error('パーソナライズ送信に失敗しました')
    }
  }

  // Auto-message functions
  const handleTestAutoMessage = async () => {
    try {
      await axios.post(`${API_BASE_URL}/auto-messages/test`, {
        customerId: 'demo-customer-1',
        triggerType: 'APPOINTMENT_REMINDER',
        scheduledFor: new Date(Date.now() + 60000).toISOString() // 1 minute from now
      })
      
      toast.success('自動メッセージのテストを開始しました（1分後に送信予定）')
    } catch (error) {
      toast.error('自動メッセージテストの設定に失敗しました')
    }
  }

  const handleCreateAutoMessage = async () => {
    try {
      // Demo: Create recurring reminder template
      await axios.post(`${API_BASE_URL}/auto-messages/templates`, {
        name: '予約リマインダー',
        triggerType: 'APPOINTMENT_REMINDER',
        timing: 'BEFORE',
        timingValue: 1440, // 24 hours before
        template: '{{customerName}}様、明日{{appointmentTime}}にご予約をいただいております。お気をつけてお越しください。',
        channels: ['LINE', 'INSTAGRAM'],
        isActive: true
      })
      
      toast.success('自動メッセージテンプレートを作成しました')
    } catch (error) {
      toast.error('テンプレートの作成に失敗しました')
    }
  }

  // Analytics and prediction functions
  const handleAnalyzeSegments = async () => {
    try {
      await axios.post(`${API_BASE_URL}/analytics/segments/analyze`)
      toast.success('顧客セグメント分析を開始しました')
    } catch (error) {
      toast.error('セグメント分析の開始に失敗しました')
    }
  }

  const handlePredictDemand = async () => {
    try {
      const response = await axios.post(`${API_BASE_URL}/analytics/predict-demand`, {
        targetDate: format(calendarDate, 'yyyy-MM-dd'),
        analysisType: 'WEEKLY'
      })
      
      toast.success(`需要予測完了: ${response.data.prediction}% の稼働率予測`)
    } catch (error) {
      toast.error('需要予測の実行に失敗しました')
    }
  }

  // RFM Analysis function
  const handleRFMAnalysis = async () => {
    try {
      await axios.post(`${API_BASE_URL}/messages/broadcast/rfm-analysis`)
      toast.success('RFM分析を実行しました。結果を確認してください。')
    } catch (error) {
      toast.error('RFM分析の実行に失敗しました')
    }
  }

  // Segment-based targeting function  
  const handleSegmentTargeting = async () => {
    try {
      const response = await axios.post(`${API_BASE_URL}/messages/broadcast/segments`, {
        segmentCriteria: {
          recency: 'HIGH',    // Recent customers
          frequency: 'MEDIUM', // Regular customers  
          monetary: 'HIGH'    // High value customers
        }
      })
      
      toast.success(`${response.data.targetCustomers}名の顧客が対象として抽出されました`)
    } catch (error) {
      toast.error('セグメント抽出に失敗しました')
    }
  }

  // Smart batch send with optimization
  const handleSmartBroadcast = async () => {
    try {
      // Demo: Enhanced broadcast with delivery optimization
      if (!replyMessage.trim()) {
        toast.error('メッセージ内容を入力してください')
        return
      }

      const broadcastConfig = {
        content: replyMessage,
        segmentation: {
          enabled: true,
          criteria: ['RECENT_VISITORS', 'HIGH_VALUE']
        },
        deliveryOptimization: {
          enabled: true,
          timeWindows: ['09:00-12:00', '14:00-18:00'],
          respectQuietHours: true
        },
        personalization: {
          enabled: true,
          useCustomerName: true,
          useVisitHistory: true
        },
        abTest: {
          enabled: false,
          variants: []
        }
      }

      await axios.post(`${API_BASE_URL}/messages/broadcast/smart`, broadcastConfig)
      
      setReplyMessage('')
      toast.success('スマート一斉送信を開始しました。配信状況は送信履歴で確認できます。')
    } catch (error) {
      toast.error('スマート一斉送信の開始に失敗しました')
    }
  }

  // Advanced A/B Testing
  const handleABTestBroadcast = async () => {
    try {
      const abTestConfig = {
        name: 'キャンペーン告知テスト',
        variants: [
          {
            name: 'パターンA（お得感重視）',
            content: '🎉特別価格でご提供中！お見逃しなく！',
            weight: 50
          },
          {
            name: 'パターンB（品質重視）',  
            content: '✨当店こだわりの技術で美しくなりませんか？',
            weight: 50
          }
        ],
        segmentation: {
          enabled: true,
          criteria: ['ACTIVE_CUSTOMERS']
        },
        duration: '7d',
        successMetric: 'CONVERSION_RATE'
      }

      await axios.post(`${API_BASE_URL}/messages/broadcast/ab-test`, abTestConfig)
      
      toast.success('A/Bテストを開始しました。結果は1週間後に確認できます。')
    } catch (error) {
      toast.error('A/Bテストの開始に失敗しました')
    }
  }

  // Additional utility functions for batch operations  
  const handleBulkStatusUpdate = async (status: string) => {
    try {
      const selectedThreadIds = getSelectedThreadIds()
      
      await axios.put(`${API_BASE_URL}/messages/threads/bulk-status`, {
        threadIds: selectedThreadIds,
        status: status
      })
      
      toast.success(`${selectedThreadIds.length}件のスレッドステータスを更新しました`)
    } catch (error) {
      toast.error('ステータス更新に失敗しました')
    }
  }

  const handleBulkAssignment = async (staffId: string) => {
    try {
      const selectedThreadIds = getSelectedThreadIds()
      
      await axios.put(`${API_BASE_URL}/messages/threads/bulk-assign`, {
        threadIds: selectedThreadIds,
        staffId: staffId
      })
      
      toast.success(`${selectedThreadIds.length}件のスレッドを担当者に割り当てました`)
    } catch (error) {
      toast.error('担当者割り当てに失敗しました')  
    }
  }

  const handleBulkTagging = async (tags: string[]) => {
    try {
      const selectedThreadIds = getSelectedThreadIds()
      
      await axios.put(`${API_BASE_URL}/messages/threads/bulk-tag`, {
        threadIds: selectedThreadIds,
        tags: tags
      })
      
      toast.success(`${selectedThreadIds.length}件のスレッドにタグを追加しました`)
    } catch (error) {
      toast.error('タグ追加に失敗しました')
    }
  }

  // Advanced filter and search functions
  const handleAdvancedSearch = async (criteria: any) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/messages/search/advanced`, criteria)
      
      // Update threads with search results
      // setThreads(response.data.threads)
      toast.success(`${response.data.totalResults}件の結果が見つかりました`)
    } catch (error) {
      toast.error('高度検索の実行に失敗しました')
    }
  }

  const handleSaveFilter = async (filterName: string) => {
    try {
      await axios.post(`${API_BASE_URL}/messages/saved-filters`, {
        name: filterName,
        filters: filters
      })
      
      toast.success('フィルターを保存しました')
    } catch (error) {
      toast.error('フィルターの保存に失敗しました')
    }
  }

  const handleLoadSavedFilter = async (filterId: string) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/messages/saved-filters/${filterId}`)
      
      setFilters(response.data.filters)
      toast.success('保存済みフィルターを適用しました')
    } catch (error) {
      toast.error('フィルターの読み込みに失敗しました')
    }
  }

  // Check authentication on mount
  useEffect(() => {
    const token = localStorage.getItem('token')
    const staffData = localStorage.getItem('staff')
    
    if (token && staffData) {
      setIsAuthenticated(true)
      setCurrentStaff(JSON.parse(staffData))
    }
  }, [])

  // Handle login
  const handleLogin = (token: string, staff: any) => {
    setIsAuthenticated(true)
    setCurrentStaff(staff)
  }

  // Handle logout
  const handleLogout = () => {
    localStorage.removeItem('token')
    localStorage.removeItem('staff')
    setIsAuthenticated(false)
    setCurrentStaff(null)
  }

  // Generate time slots
  const generateTimeSlots = () => {
    const slots = []
    for (let hour = businessSettings.openHour; hour < businessSettings.closeHour; hour++) {
      for (let minute = 0; minute < 60; minute += businessSettings.timeSlotMinutes) {
        slots.push(`${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`)
      }
    }
    return slots
  }

  // Check if date is closed
  const isClosedDay = (date: Date) => {
    const dayOfWeek = date.getDay()
    const dateString = format(date, 'yyyy-MM-dd')
    return businessSettings.closedDays.includes(dayOfWeek) || 
           businessSettings.customClosedDates.includes(dateString)
  }

  // Get dates for calendar view
  const getCalendarDates = () => {
    switch (calendarView) {
      case 'day':
        return [calendarDate]
      case 'threeDay':
        return [
          calendarDate,
          new Date(calendarDate.getTime() + 24 * 60 * 60 * 1000),
          new Date(calendarDate.getTime() + 2 * 24 * 60 * 60 * 1000)
        ]
      case 'week':
        const startOfWeek = new Date(calendarDate)
        startOfWeek.setDate(calendarDate.getDate() - calendarDate.getDay())
        return Array.from({ length: 7 }, (_, i) => {
          const date = new Date(startOfWeek)
          date.setDate(startOfWeek.getDate() + i)
          return date
        })
      default:
        return [calendarDate]
    }
  }

  // Get reservations for specific date and time
  const getReservationsForSlot = (date: Date, time: string) => {
    const slotDateTime = new Date(date)
    const [hours, minutes] = time.split(':').map(Number)
    slotDateTime.setHours(hours, minutes, 0, 0)

    return reservations?.reservations.filter(reservation => {
      const reservationStart = new Date(reservation.startTime)
      const reservationEnd = new Date(reservation.endTime)
      return slotDateTime >= reservationStart && slotDateTime < reservationEnd
    }) || []
  }

  // Sync with Google Calendar
  const handleGoogleCalendarSync = async () => {
    try {
      await axios.post(`${API_BASE_URL}/integrations/google-calendar/sync`, {
        clientId: googleCalendarSettings.clientId,
        clientSecret: googleCalendarSettings.clientSecret
      })
      
      setGoogleCalendarSettings(prev => ({
        ...prev,
        lastSync: new Date().toISOString()
      }))
      
      toast.success('Google Calendarと同期しました')
    } catch (error) {
      toast.error('Google Calendar同期に失敗しました')
    }
  }

  // Handle Instagram DM link
  const handleInstagramLink = (instagramId?: string) => {
    if (!instagramId) {
      toast.error('Instagram IDが設定されていません')
      return
    }

    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
    
    if (isMobile) {
      window.open(`instagram://user?username=${instagramId}`, '_blank')
    } else {
      window.open(`https://instagram.com/${instagramId}`, '_blank')
    }
  }

  // Handle LINE link
  const handleLineLink = (lineId?: string) => {
    if (!lineId) {
      toast.error('LINE IDが設定されていません')
      return
    }

    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
    
    if (isMobile) {
      window.open(`line://ti/p/${lineId}`, '_blank')
    } else {
      window.open(`https://line.me/ti/p/${lineId}`, '_blank')
    }
  }

  // Handle email link
  const handleEmailLink = (email: string) => {
    window.location.href = `mailto:${email}`
  }

  // Show login screen if not authenticated
  if (!isAuthenticated) {
    return <Login onLogin={handleLogin} />
  }

  const MessagesList = () => (
    <div className="space-y-4">
      {/* Advanced Search and Filters */}
      <div className="bg-white p-6 rounded-lg border border-gray-200">
        <div className="flex flex-col lg:flex-row gap-4">
          {/* Search Bar */}
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
              <input
                type="text"
                placeholder="顧客名、メッセージ内容で検索..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>

          {/* Quick Filters */}
          <div className="flex flex-wrap gap-2">
            <select
              className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
              value={filters.status}
              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
            >
              <option value="all">全ステータス</option>
              <option value="OPEN">未対応</option>
              <option value="IN_PROGRESS">対応中</option>
              <option value="CLOSED">完了</option>
            </select>

            <select
              className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
              value={filters.channel}
              onChange={(e) => setFilters(prev => ({ ...prev, channel: e.target.value }))}
            >
              <option value="all">全チャネル</option>
              <option value="INSTAGRAM">Instagram</option>
              <option value="LINE">LINE</option>
            </select>

            <label className="flex items-center text-sm">
              <input
                type="checkbox"
                className="mr-2"
                checked={filters.unreadOnly}
                onChange={(e) => setFilters(prev => ({ ...prev, unreadOnly: e.target.checked }))}
              />
              未読のみ
            </label>
          </div>
        </div>

        {/* Advanced Filter Controls */}
        <div className="mt-4 flex flex-wrap gap-2">
          <button
            onClick={() => handleAdvancedSearch(filters)}
            className="btn btn-secondary text-sm"
          >
            <Filter className="w-4 h-4 mr-2" />
            高度検索
          </button>
          
          <button
            onClick={() => handleSaveFilter('カスタムフィルター')}
            className="btn btn-secondary text-sm"
          >
            <Bookmark className="w-4 h-4 mr-2" />
            フィルター保存
          </button>

          {savedFilters.length > 0 && (
            <select
              className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
              onChange={(e) => e.target.value && handleLoadSavedFilter(e.target.value)}
              defaultValue=""
            >
              <option value="">保存済みフィルター</option>
              {savedFilters.map(filter => (
                <option key={filter.id} value={filter.id}>{filter.name}</option>
              ))}
            </select>
          )}
        </div>
      </div>

      {/* Batch Actions */}
      <div className="bg-white p-4 rounded-lg border border-gray-200">
        <div className="flex flex-wrap gap-2 mb-4">
          <span className="text-sm font-medium text-gray-700">一括操作:</span>
          
          <button
            onClick={() => handleBulkStatusUpdate('IN_PROGRESS')}
            className="btn btn-secondary text-sm"
          >
            対応中にする
          </button>
          
          <button
            onClick={() => handleBulkStatusUpdate('CLOSED')}
            className="btn btn-secondary text-sm"
          >
            完了にする
          </button>
          
          <button
            onClick={() => handleBulkTagging(['重要'])}
            className="btn btn-secondary text-sm"
          >
            <Hash className="w-4 h-4 mr-1" />
            重要タグ追加
          </button>
        </div>

        {/* Smart Broadcast Controls */}
        <div className="border-t pt-4">
          <div className="flex flex-col gap-3">
            <textarea
              placeholder="一斉送信メッセージを入力..."
              className="w-full p-3 border border-gray-300 rounded-lg resize-none"
              rows={3}
              value={replyMessage}
              onChange={(e) => setReplyMessage(e.target.value)}
            />
            
            <div className="flex flex-wrap gap-2">
              <button
                onClick={handleSmartBroadcast}
                className="btn btn-primary text-sm"
                disabled={!replyMessage.trim()}
              >
                <Send className="w-4 h-4 mr-2" />
                スマート一斉送信
              </button>
              
              <button
                onClick={handlePersonalizedBroadcast}
                className="btn btn-secondary text-sm"
                disabled={!replyMessage.trim()}
              >
                <Sparkles className="w-4 h-4 mr-2" />
                パーソナライズ送信
              </button>
              
              <button
                onClick={handleABTestBroadcast}
                className="btn btn-secondary text-sm"
              >
                <BarChart3 className="w-4 h-4 mr-2" />
                A/Bテスト実行
              </button>
              
              <button
                onClick={handleRFMAnalysis}
                className="btn btn-secondary text-sm"
              >
                <TrendingUp className="w-4 h-4 mr-2" />
                RFM分析
              </button>
              
              <button
                onClick={handleSegmentTargeting}
                className="btn btn-secondary text-sm"
              >
                <Users className="w-4 h-4 mr-2" />
                セグメント抽出
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Messages List */}
      <div className="space-y-3">
        {threads?.map((thread) => (
          <div
            key={thread.id}
            className={`bg-white p-4 rounded-lg border transition-all cursor-pointer hover:shadow-md ${
              selectedThread === thread.id ? 'border-blue-500 shadow-md' : 'border-gray-200'
            }`}
            onClick={() => setSelectedThread(selectedThread === thread.id ? null : thread.id)}
          >
            <div className="flex items-start justify-between">
              <div className="flex items-start space-x-3 flex-1">
                {/* Channel Icon */}
                <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                  thread.channel === 'INSTAGRAM' ? 'bg-pink-100' : 'bg-green-100'
                }`}>
                  {thread.channel === 'INSTAGRAM' ? (
                    <Instagram className="w-5 h-5 text-pink-600" />
                  ) : (
                    <MessageCircle className="w-5 h-5 text-green-600" />
                  )}
                </div>

                {/* Content */}
                <div className="flex-1 min-w-0">
                  <div className="flex items-center space-x-2 mb-1">
                    <h3 className="font-medium text-gray-900 truncate">
                      {thread.customer.name}
                    </h3>
                    
                    {/* Status Badge */}
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      thread.status === 'OPEN' ? 'bg-red-100 text-red-800' :
                      thread.status === 'IN_PROGRESS' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-green-100 text-green-800'
                    }`}>
                      {thread.status === 'OPEN' ? '未対応' :
                       thread.status === 'IN_PROGRESS' ? '対応中' : '完了'}
                    </span>

                    {/* Unread Count */}
                    {thread.unreadCount > 0 && (
                      <span className="bg-blue-500 text-white text-xs px-2 py-1 rounded-full">
                        {thread.unreadCount}
                      </span>
                    )}

                    {/* Tags */}
                    {thread.tags.map(tag => (
                      <span key={tag} className="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded">
                        #{tag}
                      </span>
                    ))}
                  </div>

                  <p className="text-gray-600 text-sm mb-2 line-clamp-2">
                    {thread.lastMessage.content}
                  </p>

                  <div className="flex items-center space-x-4 text-xs text-gray-500">
                    <span className="flex items-center">
                      <Clock className="w-3 h-3 mr-1" />
                      {format(new Date(thread.lastMessage.createdAt), 'MM/dd HH:mm')}
                    </span>
                    
                    {thread.assignedStaff && (
                      <span className="flex items-center">
                        <User className="w-3 h-3 mr-1" />
                        {thread.assignedStaff.name}
                      </span>
                    )}

                    <span className="flex items-center">
                      {thread.lastMessage.senderType === 'CUSTOMER' ? (
                        <CheckCircle className="w-3 h-3 mr-1 text-blue-500" />
                      ) : (
                        <Send className="w-3 h-3 mr-1 text-gray-400" />
                      )}
                      {thread.lastMessage.senderType === 'CUSTOMER' ? '顧客' : 'スタッフ'}
                    </span>
                  </div>
                </div>
              </div>

              {/* Quick Actions */}
              <div className="flex items-center space-x-2 ml-4">
                <button
                  onClick={(e) => {
                    e.stopPropagation()
                    handleInstagramLink(thread.customer.instagramId)
                  }}
                  className="p-2 text-gray-400 hover:text-pink-600 transition-colors"
                  title="Instagramで開く"
                >
                  <Instagram className="w-4 h-4" />
                </button>
                
                <button
                  onClick={(e) => {
                    e.stopPropagation()
                    handleLineLink(thread.customer.lineId)
                  }}
                  className="p-2 text-gray-400 hover:text-green-600 transition-colors"
                  title="LINEで開く"
                >
                  <MessageCircle className="w-4 h-4" />
                </button>

                <button
                  onClick={(e) => {
                    e.stopPropagation()
                    setShowReplyForm(showReplyForm === thread.id ? null : thread.id)
                  }}
                  className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                  title="返信"
                >
                  <Send className="w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Reply Form */}
            {showReplyForm === thread.id && (
              <div className="mt-4 pt-4 border-t border-gray-200">
                <div className="flex space-x-3">
                  <textarea
                    placeholder="返信を入力..."
                    className="flex-1 p-3 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows={3}
                    value={replyMessage}
                    onChange={(e) => setReplyMessage(e.target.value)}
                  />
                  <div className="flex flex-col space-y-2">
                    <button
                      onClick={() => handleSendReply(thread.id)}
                      className="btn btn-primary px-4 py-2"
                      disabled={!replyMessage.trim()}
                    >
                      <Send className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => setShowReplyForm(null)}
                      className="btn btn-secondary px-4 py-2"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}

        {(!threads || threads.length === 0) && (
          <div className="text-center py-12 text-gray-500">
            <MessageSquare className="w-12 h-12 mx-auto mb-4 text-gray-300" />
            <p>メッセージがありません</p>
          </div>
        )}
      </div>
    </div>
  )

  const ReservationsCalendar = () => {
    const timeSlots = generateTimeSlots()
    const calendarDates = getCalendarDates()

    return (
      <div className="space-y-6">
        {/* Calendar Header */}
        <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
          <div className="flex items-center space-x-4">
            <h2 className="text-xl md:text-2xl font-bold text-gray-900">予約管理</h2>
            
            {/* View Toggle */}
            <div className="flex bg-gray-100 rounded-lg p-1">
              {['day', 'threeDay', 'week', 'month'].map((view) => (
                <button
                  key={view}
                  onClick={() => setCalendarView(view as any)}
                  className={`px-3 py-1 text-sm rounded-md transition-colors ${
                    calendarView === view
                      ? 'bg-white text-gray-900 shadow-sm'
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  {view === 'day' ? '日' : 
                   view === 'threeDay' ? '3日' :
                   view === 'week' ? '週' : '月'}
                </button>
              ))}
            </div>
          </div>

          {/* Date Navigation */}
          <div className="flex items-center space-x-4">
            <button
              onClick={() => {
                const newDate = new Date(calendarDate)
                newDate.setDate(calendarDate.getDate() - (calendarView === 'month' ? 30 : calendarView === 'week' ? 7 : 1))
                setCalendarDate(newDate)
              }}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <ChevronLeft className="w-5 h-5" />
            </button>

            <h3 className="text-lg font-semibold min-w-[200px] text-center">
              {format(calendarDate, 'yyyy年MM月dd日', { locale: ja })}
            </h3>

            <button
              onClick={() => {
                const newDate = new Date(calendarDate)
                newDate.setDate(calendarDate.getDate() + (calendarView === 'month' ? 30 : calendarView === 'week' ? 7 : 1))
                setCalendarDate(newDate)
              }}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <ChevronRight className="w-5 h-5" />
            </button>

            <button
              onClick={() => setCalendarDate(new Date())}
              className="btn btn-secondary text-sm"
            >
              今日
            </button>
          </div>
        </div>

        {/* Calendar View */}
        {calendarView === 'month' ? (
          <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
            {/* Month Calendar Implementation */}
            <div className="grid grid-cols-7 border-b border-gray-200">
              {['日', '月', '火', '水', '木', '金', '土'].map((day, index) => (
                <div
                  key={day}
                  className={`p-4 text-center font-medium ${
                    index === 0 ? 'text-red-600' : index === 6 ? 'text-blue-600' : 'text-gray-700'
                  } bg-gray-50 border-r border-gray-200 last:border-r-0`}
                >
                  {day}
                </div>
              ))}
            </div>

            {/* Calendar Grid */}
            {Array.from({ length: 6 }, (_, weekIndex) => (
              <div key={weekIndex} className="grid grid-cols-7 border-b border-gray-200 last:border-b-0">
                {Array.from({ length: 7 }, (_, dayIndex) => {
                  const currentDate = new Date(calendarDate.getFullYear(), calendarDate.getMonth(), 1)
                  currentDate.setDate(currentDate.getDate() - currentDate.getDay() + weekIndex * 7 + dayIndex)
                  
                  const dayReservations = reservations?.reservations.filter(r => 
                    format(new Date(r.startTime), 'yyyy-MM-dd') === format(currentDate, 'yyyy-MM-dd')
                  ) || []

                  const isCurrentMonth = currentDate.getMonth() === calendarDate.getMonth()
                  const isToday = format(currentDate, 'yyyy-MM-dd') === format(new Date(), 'yyyy-MM-dd')
                  const isClosed = isClosedDay(currentDate)

                  return (
                    <div
                      key={dayIndex}
                      className={`min-h-[120px] p-2 border-r border-gray-200 last:border-r-0 ${
                        !isCurrentMonth ? 'bg-gray-50' : isClosed ? 'bg-red-50' : 'bg-white'
                      } ${isToday ? 'bg-blue-50' : ''}`}
                    >
                      <div className={`text-sm mb-1 ${
                        !isCurrentMonth ? 'text-gray-400' : 
                        isToday ? 'text-blue-600 font-bold' :
                        dayIndex === 0 ? 'text-red-600' :
                        dayIndex === 6 ? 'text-blue-600' : 'text-gray-700'
                      }`}>
                        {currentDate.getDate()}
                      </div>

                      {isClosed && (
                        <div className="text-xs text-red-600 mb-1">定休日</div>
                      )}

                      <div className="space-y-1">
                        {dayReservations.slice(0, 3).map((reservation) => (
                          <div
                            key={reservation.id}
                            className={`text-xs p-1 rounded text-white truncate ${
                              reservation.status === 'CONFIRMED' ? 'bg-blue-500' :
                              reservation.status === 'PENDING' ? 'bg-yellow-500' :
                              reservation.status === 'CANCELLED' ? 'bg-red-500' :
                              'bg-green-500'
                            }`}
                            title={`${format(new Date(reservation.startTime), 'HH:mm')} ${reservation.customer.name} - ${reservation.service.name}`}
                          >
                            {format(new Date(reservation.startTime), 'HH:mm')} {reservation.customer.name}
                          </div>
                        ))}
                        
                        {dayReservations.length > 3 && (
                          <div className="text-xs text-gray-500">
                            他{dayReservations.length - 3}件
                          </div>
                        )}
                      </div>
                    </div>
                  )
                })}
              </div>
            ))}
          </div>
        ) : (
          <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
            <div className="flex">
              {/* Time column */}
              <div className="w-20 border-r border-gray-200">
                <div className="h-12 border-b border-gray-200 bg-gray-50 flex items-center justify-center text-sm font-medium text-gray-500">
                  時間
                </div>
                
                {timeSlots.map((time) => (
                  <div
                    key={time}
                    className="h-16 border-b border-gray-200 flex items-center justify-center text-sm text-gray-700 bg-gray-50"
                  >
                    {time}
                  </div>
                ))}
              </div>

              {/* Date columns */}
              <div className="flex-1 min-w-0">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-7 gap-0">
                  {calendarDates.map((date, dateIndex) => {
                    const isClosed = isClosedDay(date)
                    
                    return (
                      <div key={dateIndex} className="border-r border-gray-200 last:border-r-0">
                        <div className={`h-12 border-b border-gray-200 flex flex-col items-center justify-center text-sm ${
                          isClosed ? 'bg-red-50 text-red-600' : 'bg-gray-50 text-gray-700'
                        }`}>
                          <div className="font-medium">
                            {format(date, 'M/d', { locale: ja })}
                          </div>
                          <div className="text-xs">
                            {format(date, 'E', { locale: ja })}
                          </div>
                          {isClosed && (
                            <div className="text-xs text-red-500">休</div>
                          )}
                        </div>

                        {timeSlots.map((time) => {
                          const slotReservations = getReservationsForSlot(date, time)
                          
                          return (
                            <div
                              key={time}
                              className={`h-16 border-b border-gray-200 p-1 ${
                                isClosed ? 'bg-gray-100' : 'bg-white hover:bg-gray-50'
                              }`}
                            >
                              {!isClosed && slotReservations.map((reservation) => (
                                <div
                                  key={reservation.id}
                                  className={`text-xs p-1 rounded mb-1 text-white truncate ${
                                    reservation.status === 'CONFIRMED' ? 'bg-blue-500' :
                                    reservation.status === 'PENDING' ? 'bg-yellow-500' :
                                    reservation.status === 'CANCELLED' ? 'bg-red-500' :
                                    'bg-green-500'
                                  }`}
                                  title={`${reservation.customer.name} - ${reservation.service.name} (${reservation.staff.name})`}
                                >
                                  {reservation.customer.name}
                                </div>
                              ))}
                            </div>
                          )
                        })}
                      </div>
                    )
                  })}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )

  const CustomersList = () => (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6">
        <h2 className="text-xl md:text-2xl font-bold text-gray-900">顧客管理</h2>
        <button className="btn btn-primary text-sm">新規顧客登録</button>
      </div>

      {/* Customer Registration Form */}
      <div className="bg-white p-6 rounded-lg border border-gray-200 mb-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">新規顧客登録</h3>
        
        <form onSubmit={handleCustomerRegistration} className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">お名前 *</label>
            <input
              type="text"
              required
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={newCustomer.name}
              onChange={(e) => setNewCustomer(prev => ({ ...prev, name: e.target.value }))}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">電話番号</label>
            <input
              type="tel"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={newCustomer.phone}
              onChange={(e) => setNewCustomer(prev => ({ ...prev, phone: e.target.value }))}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">メールアドレス</label>
            <input
              type="email"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={newCustomer.email}
              onChange={(e) => setNewCustomer(prev => ({ ...prev, email: e.target.value }))}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Instagram ID</label>
            <input
              type="text"
              placeholder="@username"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={newCustomer.instagramId}
              onChange={(e) => setNewCustomer(prev => ({ ...prev, instagramId: e.target.value }))}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">LINE ID</label>
            <input
              type="text"
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={newCustomer.lineId}
              onChange={(e) => setNewCustomer(prev => ({ ...prev, lineId: e.target.value }))}
            />
          </div>

          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">メモ</label>
            <textarea
              rows={3}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={newCustomer.notes}
              onChange={(e) => setNewCustomer(prev => ({ ...prev, notes: e.target.value }))}
            />
          </div>

          <div className="md:col-span-2">
            <button
              type="submit"
              className="btn btn-primary"
            >
              顧客を登録
            </button>
          </div>
        </form>
      </div>

      {/* Customers List */}
      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        {customers?.customers.map((customer) => (
          <div
            key={customer.id}
            className="bg-white p-6 rounded-lg border border-gray-200 hover:shadow-md transition-shadow cursor-pointer"
            onClick={() => setSelectedCustomer(customer)}
          >
            <div className="flex items-start justify-between mb-4">
              <div>
                <h3 className="font-semibold text-gray-900">{customer.name}</h3>
                <p className="text-sm text-gray-500">ID: {customer.customerNumber}</p>
              </div>
              
              <div className="flex space-x-2">
                {customer.phone && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation()
                      window.open(`tel:${customer.phone}`)
                    }}
                    className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                    title="電話をかける"
                  >
                    <Phone className="w-4 h-4" />
                  </button>
                )}
                
                {customer.email && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation()
                      handleEmailLink(customer.email!)
                    }}
                    className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                    title="メールを送る"
                  >
                    <Mail className="w-4 h-4" />
                  </button>
                )}
                
                {customer.instagramId && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation()
                      handleInstagramLink(customer.instagramId!)
                    }}
                    className="p-2 text-gray-400 hover:text-pink-600 transition-colors"
                    title="Instagramで開く"
                  >
                    <Instagram className="w-4 h-4" />
                  </button>
                )}
                
                {customer.lineId && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation()
                      handleLineLink(customer.lineId!)
                    }}
                    className="p-2 text-gray-400 hover:text-green-600 transition-colors"
                    title="LINEで開く"
                  >
                    <MessageCircle className="w-4 h-4" />
                  </button>
                )}
              </div>
            </div>

            <div className="space-y-2 text-sm">
              {customer.phone && (
                <div className="flex items-center text-gray-600">
                  <Phone className="w-4 h-4 mr-2" />
                  {customer.phone}
                </div>
              )}
              
              {customer.email && (
                <div className="flex items-center text-gray-600">
                  <Mail className="w-4 h-4 mr-2" />
                  {customer.email}
                </div>
              )}

              <div className="flex items-center justify-between pt-2 border-t border-gray-100">
                <span className="text-gray-600">来店回数: {customer.visitCount}回</span>
                <span className="text-gray-600">総額: ¥{customer.totalSpent.toLocaleString()}</span>
              </div>
              
              {customer.lastVisit && (
                <div className="text-gray-500 text-xs">
                  最終来店: {format(new Date(customer.lastVisit), 'yyyy/MM/dd')}
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* Customer Detail Modal */}
      {selectedCustomer && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-gray-900">顧客カルテ</h2>
                <button
                  onClick={() => setSelectedCustomer(null)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <div className="space-y-6">
                {/* Basic Info */}
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">お名前</label>
                    <p className="text-gray-900">{selectedCustomer.name}</p>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">顧客番号</label>
                    <p className="text-gray-900">{selectedCustomer.customerNumber}</p>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">電話番号</label>
                    <p className="text-gray-900">{selectedCustomer.phone || '未登録'}</p>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">メールアドレス</label>
                    <p className="text-gray-900">{selectedCustomer.email || '未登録'}</p>
                  </div>
                </div>

                {/* SNS Info */}
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Instagram</label>
                    <div className="flex items-center">
                      <p className="text-gray-900 mr-2">{selectedCustomer.instagramId || '未登録'}</p>
                      {selectedCustomer.instagramId && (
                        <button
                          onClick={() => handleInstagramLink(selectedCustomer.instagramId!)}
                          className="text-pink-600 hover:text-pink-700"
                        >
                          <ExternalLink className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">LINE</label>
                    <div className="flex items-center">
                      <p className="text-gray-900 mr-2">{selectedCustomer.lineId || '未登録'}</p>
                      {selectedCustomer.lineId && (
                        <button
                          onClick={() => handleLineLink(selectedCustomer.lineId!)}
                          className="text-green-600 hover:text-green-700"
                        >
                          <ExternalLink className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  </div>
                </div>

                {/* Statistics */}
                <div className="bg-gray-50 p-4 rounded-lg">
                  <h3 className="font-medium text-gray-900 mb-3">来店統計</h3>
                  <div className="grid grid-cols-3 gap-4 text-center">
                    <div>
                      <p className="text-2xl font-bold text-blue-600">{selectedCustomer.visitCount}</p>
                      <p className="text-sm text-gray-600">来店回数</p>
                    </div>
                    <div>
                      <p className="text-2xl font-bold text-green-600">¥{selectedCustomer.totalSpent.toLocaleString()}</p>
                      <p className="text-sm text-gray-600">総利用額</p>
                    </div>
                    <div>
                      <p className="text-2xl font-bold text-orange-600">
                        {selectedCustomer.visitCount > 0 ? Math.round(selectedCustomer.totalSpent / selectedCustomer.visitCount).toLocaleString() : 0}
                      </p>
                      <p className="text-sm text-gray-600">平均単価</p>
                    </div>
                  </div>
                </div>

                {/* Notes */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">メモ</label>
                  <div className="bg-gray-50 p-3 rounded-lg min-h-[100px]">
                    <p className="text-gray-900 whitespace-pre-wrap">
                      {selectedCustomer.notes || 'メモはありません'}
                    </p>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex space-x-3 pt-4 border-t border-gray-200">
                  <button className="btn btn-primary flex-1">
                    <CalendarIcon className="w-4 h-4 mr-2" />
                    予約を追加
                  </button>
                  
                  <button
                    onClick={() => setActiveTab('messages')}
                    className="btn btn-secondary flex items-center"
                  >
                    <MessageSquare className="w-4 h-4 mr-2" />
                    メッセージ履歴
                  </button>
                  
                  <button
                    onClick={() => setActiveTab('reservations')}
                    className="btn btn-secondary flex items-center"
                  >
                    <CalendarIcon className="w-4 h-4 mr-2" />
                    予約履歴
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )

  const Dashboard = () => {
    const totalThreads = threads?.length || 0
    const todayReservations = reservations?.reservations.filter(r => 
      isToday(new Date(r.startTime))
    ).length || 0

    const totalCustomers = customers?.customers.length || 0
    const monthlyRevenue = reservations?.reservations.filter(r => {
      const reservationDate = new Date(r.startTime)
      const now = new Date()
      return reservationDate.getMonth() === now.getMonth() && 
             reservationDate.getFullYear() === now.getFullYear() &&
             r.status === 'COMPLETED'
    }).reduce((sum, r) => sum + r.service.price, 0) || 0

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900">ダッシュボード</h1>
          <div className="text-sm text-gray-500">
            最終更新: {format(new Date(), 'MM/dd HH:mm')}
          </div>
        </div>

        {/* KPI Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">未読メッセージ</p>
                <p className="text-2xl font-bold text-blue-600">{unreadCount}</p>
              </div>
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <MessageSquare className="w-6 h-6 text-blue-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">今日の予約</p>
                <p className="text-2xl font-bold text-green-600">{todayReservations}</p>
              </div>
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                <Calendar className="w-6 h-6 text-green-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">総顧客数</p>
                <p className="text-2xl font-bold text-purple-600">{totalCustomers}</p>
              </div>
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                <Users className="w-6 h-6 text-purple-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">今月の売上</p>
                <p className="text-2xl font-bold text-orange-600">¥{monthlyRevenue.toLocaleString()}</p>
              </div>
              <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                <DollarSign className="w-6 h-6 text-orange-600" />
              </div>
            </div>
          </div>
        </div>

        {/* Recent Activities */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">最新メッセージ</h3>
            <div className="space-y-3">
              {threads?.slice(0, 3).map((thread) => (
                <div key={thread.id} className="flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg transition-colors">
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    thread.channel === 'INSTAGRAM' ? 'bg-pink-100' : 'bg-green-100'
                  }`}>
                    {thread.channel === 'INSTAGRAM' ? (
                      <Instagram className="w-4 h-4 text-pink-600" />
                    ) : (
                      <MessageCircle className="w-4 h-4 text-green-600" />
                    )}
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="font-medium text-gray-900 truncate">{thread.customer.name}</p>
                    <p className="text-sm text-gray-600 truncate">{thread.lastMessage.content}</p>
                  </div>
                  <div className="text-xs text-gray-500">
                    {format(new Date(thread.lastMessage.createdAt), 'HH:mm')}
                  </div>
                </div>
              ))}
              
              {(!threads || threads.length === 0) && (
                <p className="text-gray-500 text-center py-4">メッセージがありません</p>
              )}
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">今日の予約</h3>
            <div className="space-y-3">
              {reservations?.reservations
                .filter(r => isToday(new Date(r.startTime)))
                .slice(0, 5)
                .map((reservation) => (
                <div key={reservation.id} className="flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg transition-colors">
                  <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                    <Calendar className="w-4 h-4 text-blue-600" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="font-medium text-gray-900">{reservation.customer.name}</p>
                    <p className="text-sm text-gray-600">{reservation.service.name}</p>
                  </div>
                  <div className="text-sm text-gray-500">
                    {format(new Date(reservation.startTime), 'HH:mm')}
                  </div>
                </div>
              ))}
              
              {todayReservations === 0 && (
                <p className="text-gray-500 text-center py-4">今日の予約はありません</p>
              )}
            </div>
          </div>
        </div>
      </div>
    )
  }

  const SettingsPanel = () => (
    <div className="space-y-6">
      <h2 className="text-xl md:text-2xl font-bold text-gray-900">システム設定</h2>

      {/* Business Settings */}
      <div className="bg-white p-6 rounded-lg border border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">営業設定</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">営業開始時間</label>
            <input
              type="time"
              value={`${businessSettings.openHour.toString().padStart(2, '0')}:00`}
              onChange={(e) => {
                const hour = parseInt(e.target.value.split(':')[0])
                setBusinessSettings(prev => ({ ...prev, openHour: hour }))
              }}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">営業終了時間</label>
            <input
              type="time"
              value={`${businessSettings.closeHour.toString().padStart(2, '0')}:00`}
              onChange={(e) => {
                const hour = parseInt(e.target.value.split(':')[0])
                setBusinessSettings(prev => ({ ...prev, closeHour: hour }))
              }}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">予約間隔（分）</label>
            <select
              value={businessSettings.timeSlotMinutes}
              onChange={(e) => setBusinessSettings(prev => ({ ...prev, timeSlotMinutes: parseInt(e.target.value) }))}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value={15}>15分</option>
              <option value={30}>30分</option>
              <option value={60}>60分</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">定休日</label>
            <div className="space-y-2">
              {['日', '月', '火', '水', '木', '金', '土'].map((day, index) => (
                <label key={day} className="flex items-center">
                  <input
                    type="checkbox"
                    checked={businessSettings.closedDays.includes(index)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setBusinessSettings(prev => ({
                          ...prev,
                          closedDays: [...prev.closedDays, index]
                        }))
                      } else {
                        setBusinessSettings(prev => ({
                          ...prev,
                          closedDays: prev.closedDays.filter(d => d !== index)
                        }))
                      }
                    }}
                    className="mr-2"
                  />
                  {day}曜日
                </label>
              ))}
            </div>
          </div>
        </div>

        <div className="mt-6">
          <button
            onClick={() => {
              toast.success('営業設定を保存しました')
            }}
            className="btn btn-primary"
          >
            <Save className="w-4 h-4 mr-2" />
            設定を保存
          </button>
        </div>
      </div>

      {/* Google Calendar Integration */}
      <div className="bg-white p-6 rounded-lg border border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Google Calendar連携</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Client ID</label>
            <input
              type="text"
              placeholder="Google Calendar Client ID"
              value={googleCalendarSettings.clientId}
              onChange={(e) => setGoogleCalendarSettings(prev => ({ ...prev, clientId: e.target.value }))}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Client Secret</label>
            <input
              type="password"
              placeholder="Google Calendar Client Secret"
              value={googleCalendarSettings.clientSecret}
              onChange={(e) => setGoogleCalendarSettings(prev => ({ ...prev, clientSecret: e.target.value }))}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="autoSync"
              checked={googleCalendarSettings.autoSync}
              onChange={(e) => setGoogleCalendarSettings(prev => ({ ...prev, autoSync: e.target.checked }))}
              className="rounded"
            />
            <label htmlFor="autoSync" className="text-sm text-gray-700">自動同期を有効にする</label>
          </div>

          <div className="flex space-x-3">
            <button
              onClick={handleGoogleCalendarSync}
              disabled={!googleCalendarSettings.clientId || !googleCalendarSettings.clientSecret}
              className="btn btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              今すぐ同期
            </button>

            <button
              onClick={() => {
                toast.success('Google Calendar設定を保存しました')
              }}
              className="btn btn-secondary"
            >
              <Save className="w-4 h-4 mr-2" />
              設定を保存
            </button>
          </div>

          {googleCalendarSettings.lastSync && (
            <p className="text-sm text-gray-600">
              最終同期: {format(new Date(googleCalendarSettings.lastSync), 'yyyy/MM/dd HH:mm')}
            </p>
          )}
        </div>
      </div>

      {/* Auto Message Settings */}
      <div className="bg-white p-6 rounded-lg border border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">自動メッセージ設定</h3>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">予約リマインダー</h4>
              <p className="text-sm text-gray-600">予約の24時間前に自動送信</p>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={handleTestAutoMessage}
                className="btn btn-secondary text-sm"
              >
                テスト送信
              </button>
              <button
                onClick={handleCreateAutoMessage}
                className="btn btn-primary text-sm"
              >
                設定
              </button>
            </div>
          </div>

          <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">来店後フォローアップ</h4>
              <p className="text-sm text-gray-600">来店から3日後に感謝メッセージを送信</p>
            </div>
            <div className="flex space-x-2">
              <button className="btn btn-secondary text-sm">テスト送信</button>
              <button className="btn btn-primary text-sm">設定</button>
            </div>
          </div>

          <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">次回予約推奨</h4>
              <p className="text-sm text-gray-600">前回来店から30日後に次回予約をおすすめ</p>
            </div>
            <div className="flex space-x-2">
              <button className="btn btn-secondary text-sm">テスト送信</button>
              <button className="btn btn-primary text-sm">設定</button>
            </div>
          </div>
        </div>
      </div>

      {/* Advanced Analytics Settings */}
      <div className="bg-white p-6 rounded-lg border border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">高度分析機能</h3>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">顧客セグメント分析</h4>
              <p className="text-sm text-gray-600">RFM分析による顧客グループ分類</p>
            </div>
            <button
              onClick={handleAnalyzeSegments}
              className="btn btn-primary text-sm"
            >
              <BarChart3 className="w-4 h-4 mr-2" />
              分析実行
            </button>
          </div>

          <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">需要予測</h4>
              <p className="text-sm text-gray-600">AI による予約需要の予測分析</p>
            </div>
            <button
              onClick={handlePredictDemand}
              className="btn btn-primary text-sm"
            >
              <TrendingUp className="w-4 h-4 mr-2" />
              予測実行
            </button>
          </div>

          <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">パーソナライズエンジン</h4>
              <p className="text-sm text-gray-600">顧客別最適化されたメッセージ配信</p>
            </div>
            <button className="btn btn-primary text-sm">
              <Sparkles className="w-4 h-4 mr-2" />
              設定
            </button>
          </div>
        </div>
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Top Navigation */}
      <nav className="bg-white border-b border-gray-200 px-4 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="lg:hidden p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <Menu className="w-6 h-6" />
            </button>
            
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-blue-600 text-white rounded-lg flex items-center justify-center">
                <Scissors className="w-5 h-5" />
              </div>
              <h1 className="text-xl font-bold text-gray-900 hidden sm:block">美容室統合管理システム</h1>
              <h1 className="text-lg font-bold text-gray-900 sm:hidden">SalonManager</h1>
            </div>
          </div>

          <div className="flex items-center space-x-4">
            {/* Unread Messages Indicator */}
            {unreadCount > 0 && (
              <div className="flex items-center space-x-2 bg-red-50 text-red-700 px-3 py-1 rounded-full text-sm">
                <AlertCircle className="w-4 h-4" />
                <span>{unreadCount}件の未読メッセージ</span>
              </div>
            )}

            {/* User Menu */}
            <div className="flex items-center space-x-3">
              <div className="hidden md:block text-right">
                <p className="text-sm font-medium text-gray-900">{currentStaff?.name}</p>
                <p className="text-xs text-gray-500">{currentStaff?.role}</p>
              </div>
              
              <div className="w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center">
                <User className="w-5 h-5" />
              </div>

              <button
                onClick={handleLogout}
                className="p-2 text-gray-400 hover:text-red-600 transition-colors"
                title="ログアウト"
              >
                <LogOut className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </nav>

      <div className="flex">
        {/* Sidebar */}
        <aside className={`
          ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}
          lg:translate-x-0 transition-transform duration-300 ease-in-out
          fixed lg:static inset-y-0 left-0 z-50
          w-64 bg-white border-r border-gray-200 pt-16 lg:pt-0
        `}>
          <nav className="h-full overflow-y-auto p-4">
            <div className="space-y-2">
              {[
                { id: 'dashboard', label: 'ダッシュボード', icon: BarChart3 },
                { id: 'messages', label: 'メッセージ管理', icon: MessageSquare, badge: unreadCount },
                { id: 'reservations', label: '予約管理', icon: Calendar },
                { id: 'customers', label: '顧客管理', icon: Users },
                { id: 'settings', label: '設定', icon: Settings },
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => {
                    setActiveTab(tab.id)
                    setSidebarOpen(false)
                  }}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${
                    activeTab === tab.id
                      ? 'bg-blue-50 text-blue-700 border border-blue-200'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <tab.icon className="w-5 h-5" />
                  <span className="font-medium">{tab.label}</span>
                  {tab.badge && tab.badge > 0 && (
                    <span className="ml-auto bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                      {tab.badge}
                    </span>
                  )}
                </button>
              ))}
            </div>
          </nav>
        </aside>

        {/* Main Content */}
        <main className="flex-1 p-6 lg:p-8 max-w-full overflow-hidden">
          {activeTab === 'dashboard' && <Dashboard />}
          {activeTab === 'messages' && <MessagesList />}
          {activeTab === 'reservations' && <ReservationsCalendar />}
          {activeTab === 'customers' && <CustomersList />}
          {activeTab === 'settings' && <SettingsPanel />}
        </main>
      </div>

      {/* Sidebar Overlay */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}
    </div>
  )
}

export default App;