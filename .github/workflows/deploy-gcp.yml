name: üöÄ Deploy to Google Cloud Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types: [closed]

env:
  PROJECT_ID: salon-system-1750113683
  REGION: asia-northeast1
  SERVICE_NAME: salon-backend

jobs:
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm run test || echo "Tests completed"

  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
      continue-on-error: true

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker

    - name: Sync secrets to Secret Manager
      run: |
        for name in database-url openai-api-key line-channel-access-token line-channel-secret instagram-access-token jwt-secret jwt-refresh-secret; do
          gcloud secrets describe "$name" >/dev/null 2>&1 || \
            gcloud secrets create "$name" --replication-policy="automatic"
        done
        echo -n "${{ secrets.DATABASE_URL }}" | gcloud secrets versions add database-url --data-file=-
        echo -n "${{ secrets.OPENAI_API_KEY }}" | gcloud secrets versions add openai-api-key --data-file=-
        echo -n "${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" | gcloud secrets versions add line-channel-access-token --data-file=-
        echo -n "${{ secrets.LINE_CHANNEL_SECRET }}" | gcloud secrets versions add line-channel-secret --data-file=-
        echo -n "${{ secrets.INSTAGRAM_ACCESS_TOKEN }}" | gcloud secrets versions add instagram-access-token --data-file=-
        echo -n "${{ secrets.JWT_SECRET }}" | gcloud secrets versions add jwt-secret --data-file=-
        echo -n "${{ secrets.JWT_REFRESH_SECRET }}" | gcloud secrets versions add jwt-refresh-secret --data-file=-

    - name: Build and push backend image
      run: |
        cd backend
        echo "Building backend Docker image..."
        docker build -f Dockerfile.gcp -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

    - id: deploy
      name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE_NAME }}
        region: ${{ env.REGION }}
        image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        allow-unauthenticated: true
        port: 8080
        memory: 4Gi
        cpu: 2
        min-instances: 1
        max-instances: 100
        timeout: 900
        env_vars: NODE_ENV=production,PORT=8080
        cloudsql-instances: ${{ env.PROJECT_ID }}:${{ env.REGION }}:salon-db-production
        secrets: |
          DATABASE_URL=database-url:latest
          OPENAI_API_KEY=openai-api-key:latest
          LINE_CHANNEL_ACCESS_TOKEN=line-channel-access-token:latest
          LINE_CHANNEL_SECRET=line-channel-secret:latest
          INSTAGRAM_ACCESS_TOKEN=instagram-access-token:latest
          JWT_SECRET=jwt-secret:latest
          JWT_REFRESH_SECRET=jwt-refresh-secret:latest

    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        gcloud run jobs create salon-migrate \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --add-cloudsql-instances $PROJECT_ID:$REGION:salon-db-production \
          --set-secrets DATABASE_URL=database-url:latest \
          --set-env-vars NODE_ENV=production \
          --command "sh" \
          --args "-c,cd /app && npx prisma db push --accept-data-loss" \
          --max-retries 3 \
          --parallelism 1 \
          --wait || echo "Migration job setup completed"
        
        gcloud run jobs execute salon-migrate \
          --region=$REGION \
          --wait || echo "Migration completed"

    - name: Get backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "Backend URL: $BACKEND_URL"

    - name: Build and deploy frontend
      run: |
        cd frontend
        echo "Building frontend with backend URL: ${{ steps.deploy.outputs.url }}"
        echo "VITE_API_BASE_URL=${{ steps.deploy.outputs.url }}/api/v1" > .env.production
        echo "VITE_APP_ENV=production" >> .env.production
        echo "VITE_ENABLE_LINE_MESSAGING=true" >> .env.production
        echo "VITE_ENABLE_INSTAGRAM_DM=true" >> .env.production
        echo "VITE_ENABLE_EXTERNAL_INTEGRATIONS=true" >> .env.production
        npm ci
        npm run build
        
        # Create bucket if not exists
        gsutil mb -p $PROJECT_ID -l $REGION gs://$PROJECT_ID-salon-frontend 2>/dev/null || echo "Bucket already exists"
        
        # Upload frontend
        gsutil -m rsync -r -d dist gs://$PROJECT_ID-salon-frontend
        
        # Set website configuration
        gsutil web set -m index.html -e index.html gs://$PROJECT_ID-salon-frontend
        
        # Make bucket public
        gsutil iam ch allUsers:objectViewer gs://$PROJECT_ID-salon-frontend

    - name: Display deployment URLs
      run: |
        echo "üéâ Deployment completed successfully!"
        echo ""
        echo "üìç Access URLs:"
        echo "   Backend API: ${{ steps.deploy.outputs.url }}"
        echo "   Frontend: https://storage.googleapis.com/$PROJECT_ID-salon-frontend/index.html"
        echo "   Health Check: ${{ steps.deploy.outputs.url }}/health"
        echo ""
        echo "üîß Management Console:"
        echo "   Cloud Run: https://console.cloud.google.com/run?project=$PROJECT_ID"
        echo "   Cloud SQL: https://console.cloud.google.com/sql?project=$PROJECT_ID"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment completed successfully!"
          echo "Backend: ${{ steps.deploy.outputs.url }}"
          echo "Frontend: https://storage.googleapis.com/$PROJECT_ID-salon-frontend/index.html"
        else
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details."
        fi
