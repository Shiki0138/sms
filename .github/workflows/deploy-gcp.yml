name: Deploy to Google Cloud

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  PROJECT_ID: salon-system-1750113683
  REGION: asia-northeast1
  SERVICE_NAME: salon-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker

    - name: Sync secrets to Secret Manager
      run: |
        for name in database-url openai-api-key line-channel-access-token line-channel-secret instagram-access-token jwt-secret jwt-refresh-secret; do
          gcloud secrets describe "$name" >/dev/null 2>&1 || \
            gcloud secrets create "$name" --replication-policy="automatic"
        done
        echo -n "${{ secrets.DATABASE_URL }}" | gcloud secrets versions add database-url --data-file=-
        echo -n "${{ secrets.OPENAI_API_KEY }}" | gcloud secrets versions add openai-api-key --data-file=-
        echo -n "${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" | gcloud secrets versions add line-channel-access-token --data-file=-
        echo -n "${{ secrets.LINE_CHANNEL_SECRET }}" | gcloud secrets versions add line-channel-secret --data-file=-
        echo -n "${{ secrets.INSTAGRAM_ACCESS_TOKEN }}" | gcloud secrets versions add instagram-access-token --data-file=-
        echo -n "${{ secrets.JWT_SECRET }}" | gcloud secrets versions add jwt-secret --data-file=-
        echo -n "${{ secrets.JWT_REFRESH_SECRET }}" | gcloud secrets versions add jwt-refresh-secret --data-file=-

    - name: Build and push backend image
      run: |
        cd backend
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

    - id: deploy
      name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE_NAME }}
        region: ${{ env.REGION }}
        image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        allow-unauthenticated: true
        env_vars: NODE_ENV=production
        cloudsql-instances: ${{ env.PROJECT_ID }}:${{ env.REGION }}:salon-db-production
        secrets: |
          DATABASE_URL=database-url:latest
          OPENAI_API_KEY=openai-api-key:latest
          LINE_CHANNEL_ACCESS_TOKEN=line-channel-access-token:latest
          LINE_CHANNEL_SECRET=line-channel-secret:latest
          INSTAGRAM_ACCESS_TOKEN=instagram-access-token:latest
          JWT_SECRET=jwt-secret:latest
          JWT_REFRESH_SECRET=jwt-refresh-secret:latest

    - name: Build and deploy frontend
      run: |
        cd frontend
        echo "VITE_API_BASE_URL=${{ steps.deploy.outputs.url }}/api/v1" > .env.production
        npm ci
        npm run build
        gsutil -m rsync -r -d dist gs://$PROJECT_ID-salon-frontend

    - name: Run database migrations
      run: |
        gcloud run jobs execute salon-migrate --region=$REGION --wait || echo "Migration job might not exist yet"

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Deployment to GCP ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
