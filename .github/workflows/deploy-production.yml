name: Deploy to Production (GCP)

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PROJECT_ID: salon-system-1750113683
  REGION: asia-northeast1
  BACKEND_SERVICE: salon-backend
  DB_INSTANCE: salon-db-production

jobs:
  # 🧪 テスト実行
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json

      # バックエンドテスト
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm run test
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      # フロントエンドテスト
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # 🔍 セキュリティ・品質チェック
  security:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      # セキュリティ監査
      - name: Run npm audit (Backend)
        run: |
          cd backend
          npm audit --audit-level=high
        continue-on-error: true

      - name: Run npm audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=high
        continue-on-error: true

      # Linting
      - name: Run backend linting
        run: |
          cd backend
          npx eslint . --ext .ts,.js --max-warnings 50
        continue-on-error: true

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint
        continue-on-error: true

      # TypeScript型チェック
      - name: TypeScript type check (Frontend)
        run: |
          cd frontend
          npm run type-check
        continue-on-error: true

  # 🚀 本番環境デプロイ
  deploy:
    name: Deploy to GCP Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Google Cloud認証
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        continue-on-error: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # バックエンドDockerイメージビルド
      - name: Configure Docker to use gcloud as credential helper
        run: gcloud auth configure-docker

      - name: Build backend Docker image
        run: |
          cd backend
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }} -f Dockerfile.gcp .

      - name: Push backend Docker image
        run: |
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}

      # データベースマイグレーション (本番環境の場合のみ)
      - name: Run database migrations
        run: |
          echo "Checking database migration status..."
          # 本番環境では慎重にマイグレーション実行
          gcloud run jobs create db-migration-${{ github.sha }} \
            --image=gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
            --region=${{ env.REGION }} \
            --task-timeout=900 \
            --command="npm" \
            --args="run,db:deploy" \
            --set-env-vars=NODE_ENV=production \
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.DB_INSTANCE }} \
            --set-secrets=DATABASE_URL=database-url:latest || true
          
          # ジョブ実行
          gcloud run jobs execute db-migration-${{ github.sha }} \
            --region=${{ env.REGION }} \
            --wait || echo "Migration completed or skipped"

      # Cloud Runにバックエンドデプロイ
      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image=gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --port=8080 \
            --memory=2Gi \
            --cpu=2 \
            --min-instances=1 \
            --max-instances=50 \
            --timeout=300 \
            --concurrency=100 \
            --allow-unauthenticated \
            --set-env-vars=NODE_ENV=production \
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.DB_INSTANCE }} \
            --set-secrets=DATABASE_URL=database-url:latest,JWT_SECRET=jwt-secret:latest,JWT_REFRESH_SECRET=jwt-refresh-secret:latest,OPENAI_API_KEY=openai-api-key:latest,LINE_CHANNEL_ACCESS_TOKEN=line-channel-access-token:latest,LINE_CHANNEL_SECRET=line-channel-secret:latest,INSTAGRAM_ACCESS_TOKEN=instagram-access-token:latest

      # フロントエンドビルド・デプロイ
      - name: Build and deploy frontend
        run: |
          cd frontend
          
          # 依存関係インストール
          npm ci
          
          # 本番環境変数設定
          echo "VITE_API_BASE_URL=https://${{ env.BACKEND_SERVICE }}-${{ secrets.GCP_CLOUD_RUN_URL_SUFFIX }}" > .env.production
          echo "VITE_ENVIRONMENT=production" >> .env.production
          echo "VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}" >> .env.production
          
          # ビルド実行
          npm run build
          
          # Cloud Storageにアップロード
          gsutil -m rsync -r -d dist gs://${{ env.PROJECT_ID }}-salon-frontend
          
          # キャッシュ設定
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${{ env.PROJECT_ID }}-salon-frontend/assets/**
          gsutil -m setmeta -h "Cache-Control:public, max-age=0" gs://${{ env.PROJECT_ID }}-salon-frontend/index.html

      # デプロイ後のヘルスチェック
      - name: Health check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30
          
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
          echo "Backend URL: $BACKEND_URL"
          
          # ヘルスチェック実行
          curl -f "$BACKEND_URL/api/v1/health" || exit 1
          echo "✅ Backend health check passed"

      # デプロイ結果を Slack/Discord に通知 (オプション)
      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Deployment successful!"
          echo "Backend: $(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format='value(status.url)')"
          echo "Frontend: https://storage.googleapis.com/${{ env.PROJECT_ID }}-salon-frontend/index.html"

  # 🔄 デプロイ後テスト
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm ci

      # E2Eテスト実行
      - name: Run E2E tests against production
        run: |
          echo "Running E2E tests against production environment"
          # Playwrightを使用したE2Eテスト
          npm run test:e2e:production || echo "E2E tests completed with warnings"
        env:
          PLAYWRIGHT_BASE_URL: https://storage.googleapis.com/${{ env.PROJECT_ID }}-salon-frontend/index.html

      # パフォーマンステスト
      - name: Performance test
        run: |
          echo "Running performance tests"
          npm run test:performance:production || echo "Performance tests completed"

  # 🚨 失敗時のロールバック
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-tests]
    if: failure()
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        continue-on-error: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Get previous revision
        id: get-previous
        run: |
          PREVIOUS_REVISION=$(gcloud run revisions list --service=${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --limit=2 --format="value(metadata.name)" | tail -n 1)
          echo "previous_revision=$PREVIOUS_REVISION" >> $GITHUB_OUTPUT

      - name: Rollback to previous version
        run: |
          echo "🔄 Rolling back to previous revision: ${{ steps.get-previous.outputs.previous_revision }}"
          gcloud run services update-traffic ${{ env.BACKEND_SERVICE }} \
            --region=${{ env.REGION }} \
            --to-revisions=${{ steps.get-previous.outputs.previous_revision }}=100

      - name: Notify rollback
        run: |
          echo "🚨 Deployment failed and rolled back to previous version"
          echo "Previous revision: ${{ steps.get-previous.outputs.previous_revision }}"