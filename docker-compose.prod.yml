version: '3.8'

# 🏭 美容室統合管理システム - 本番環境構成

services:
  # 📊 PostgreSQL データベース
  database:
    image: postgres:15-alpine
    container_name: salon-database-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-salon_management}
      POSTGRES_USER: ${POSTGRES_USER:-salon_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=ja_JP.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-salon_user} -d ${POSTGRES_DB:-salon_management}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - salon-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 🗄️ Redis キャッシュ
  redis:
    image: redis:7-alpine
    container_name: salon-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - salon-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 🌐 美容室統合管理システム - メインアプリケーション
  salon-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: salon-app-prod
    restart: unless-stopped
    environment:
      # 基本設定
      NODE_ENV: production
      PORT: 4002
      
      # データベース接続
      DATABASE_URL: postgresql://${POSTGRES_USER:-salon_user}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB:-salon_management}
      
      # Redis接続
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # セキュリティ
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # 外部API
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LINE_CHANNEL_ACCESS_TOKEN: ${LINE_CHANNEL_ACCESS_TOKEN}
      LINE_CHANNEL_SECRET: ${LINE_CHANNEL_SECRET}
      INSTAGRAM_ACCESS_TOKEN: ${INSTAGRAM_ACCESS_TOKEN}
      GOOGLE_CALENDAR_API_KEY: ${GOOGLE_CALENDAR_API_KEY}
      
      # 監視・ログ
      LOG_LEVEL: info
      SENTRY_DSN: ${SENTRY_DSN}
      
      # その他
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://salon-system.com}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    ports:
      - "80:80"
      - "4002:4002"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - salon-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # 📊 Prometheus 監視
  prometheus:
    image: prom/prometheus:latest
    container_name: salon-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - salon-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 📈 Grafana ダッシュボード
  grafana:
    image: grafana/grafana:latest
    container_name: salon-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - salon-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 🚨 Alertmanager アラート管理
  alertmanager:
    image: prom/alertmanager:latest
    container_name: salon-alertmanager-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/config.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - salon-network

  # 🔄 自動バックアップ
  backup:
    image: prodrigestivill/postgres-backup-local
    container_name: salon-backup-prod
    restart: unless-stopped
    environment:
      POSTGRES_HOST: database
      POSTGRES_DB: ${POSTGRES_DB:-salon_management}
      POSTGRES_USER: ${POSTGRES_USER:-salon_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_EXTRA_OPTS: -Z9 --schema=public
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: 30
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 12
    volumes:
      - backup_data:/backups
    depends_on:
      - database
    networks:
      - salon-network

# 🌐 ネットワーク設定
networks:
  salon-network:
    driver: bridge
    name: salon-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 💾 ボリューム設定
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-./backups}