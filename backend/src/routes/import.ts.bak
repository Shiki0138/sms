import { Router } from 'express'
import multer from 'multer'
import csv from 'csv-parser'
import { Readable } from 'stream'
import { prisma } from '../database'
import { format, parse } from 'date-fns'
import { ja } from 'date-fns/locale'
import { parseReservationEmail, parseHotpepperSampleEmail, ParsedReservation } from '../services/emailParser'

const router = Router()

// CSVファイルアップロード用のmulter設定
const upload = multer({
  storage: multer.memoryStorage(),
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'text/csv' || file.originalname.endsWith('.csv')) {
      cb(null, true)
    } else {
      cb(new Error('CSVファイルのみアップロード可能です'))
    }
  },
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB制限
  }
})

// CSVデータのパース用関数
const parseReservationCSV = (row: any) => {
  try {
    // 日時のパース（複数フォーマット対応）
    let startTime: Date
    
    if (row['予約日時'] || row['予約日'] || row['日時']) {
      const dateStr = row['予約日時'] || row['予約日'] || row['日時']
      
      // 複数の日時フォーマットに対応
      const dateFormats = [
        'yyyy/MM/dd HH:mm',
        'yyyy-MM-dd HH:mm',
        'MM/dd HH:mm',
        'M/d H:m',
        'yyyy年M月d日 H時m分'
      ]
      
      let parsed = false
      for (const format of dateFormats) {
        try {
          startTime = parse(dateStr, format, new Date())
          if (!isNaN(startTime.getTime())) {
            parsed = true
            break
          }
        } catch (e) {
          continue
        }
      }
      
      if (!parsed) {
        // 最後の手段：Date constructor
        startTime = new Date(dateStr)
        if (isNaN(startTime.getTime())) {
          throw new Error(`日時の解析に失敗: ${dateStr}`)
        }
      }
    } else {
      throw new Error('予約日時が見つかりません')
    }

    // 顧客名の取得
    const customerName = row['お客様名'] || row['顧客名'] || row['名前'] || row['氏名'] || 'Unknown'
    
    // メニューの取得
    const menuContent = row['メニュー'] || row['施術内容'] || row['コース'] || 'メニュー未設定'
    
    // スタッフ名の取得
    const staffName = row['スタッフ'] || row['担当者'] || row['担当スタッフ']
    
    // 料金の取得
    const price = row['料金'] || row['金額'] || row['価格']
    
    // 備考の取得
    const notes = row['備考'] || row['メモ'] || row['注意事項'] || ''

    return {
      startTime,
      customerName,
      menuContent,
      staffName,
      price: price ? parseInt(price.toString().replace(/[^0-9]/g, '')) : null,
      notes,
      source: 'HOTPEPPER' as const,
      status: 'CONFIRMED' as const
    }
  } catch (error) {
    throw new Error(`行の解析エラー: ${error.message}`)
  }
}

// CSVインポートエンドポイント
router.post('/csv/reservations', upload.single('csvFile'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'CSVファイルがアップロードされていません' })
    }

    const results: any[] = []
    const errors: string[] = []
    
    // CSVデータの読み込み
    const stream = Readable.from(req.file.buffer)
    
    await new Promise<void>((resolve, reject) => {
      stream
        .pipe(csv())
        .on('data', (row) => {
          try {
            const parsed = parseReservationCSV(row)
            results.push(parsed)
          } catch (error) {
            errors.push(`行 ${results.length + 1}: ${error.message}`)
          }
        })
        .on('end', () => {
          resolve()
        })
        .on('error', (error) => {
          reject(error)
        })
    })

    if (results.length === 0) {
      return res.status(400).json({ 
        error: 'インポート可能な予約データが見つかりませんでした',
        details: errors
      })
    }

    // 重複チェック用のクエリ
    const existingReservations = await prisma.reservation.findMany({
      where: {
        startTime: {
          in: results.map(r => r.startTime)
        },
        customerName: {
          in: results.map(r => r.customerName)
        }
      }
    })

    // 重複を除外
    const newReservations = results.filter(newRes => {
      return !existingReservations.some(existing => 
        existing.startTime.getTime() === newRes.startTime.getTime() &&
        existing.customerName === newRes.customerName
      )
    })

    // スタッフ情報の処理
    const processedReservations = await Promise.all(
      newReservations.map(async (reservation) => {
        let staffId = null
        
        if (reservation.staffName) {
          // 既存スタッフの検索
          let staff = await prisma.staff.findFirst({
            where: {
              name: reservation.staffName
            }
          })
          
          // スタッフが存在しない場合は作成
          if (!staff) {
            staff = await prisma.staff.create({
              data: {
                name: reservation.staffName,
                email: `${reservation.staffName.toLowerCase()}@salon.local`,
                role: 'STAFF',
                tenantId: 'demo-tenant-1' // デモ用
              }
            })
          }
          
          staffId = staff.id
        }

        return {
          ...reservation,
          staffId,
          tenantId: 'demo-tenant-1' // デモ用
        }
      })
    )

    // データベースに一括挿入
    const createdReservations = await prisma.reservation.createMany({
      data: processedReservations.map(({ staffName, ...rest }) => rest)
    })

    res.json({
      success: true,
      imported: createdReservations.count,
      skipped: results.length - newReservations.length,
      errors: errors.length > 0 ? errors : undefined,
      message: `${createdReservations.count}件の予約をインポートしました`
    })

  } catch (error) {
    console.error('CSV Import Error:', error)
    res.status(500).json({ 
      error: 'CSVインポート中にエラーが発生しました',
      details: error.message
    })
  }
})

// CSVテンプレートダウンロード
router.get('/csv/template', (req, res) => {
  const template = `予約日時,お客様名,メニュー,スタッフ,料金,備考
2024/06/10 10:00,山田太郎,カット+カラー,田中美容師,8000,初回来店
2024/06/10 14:30,佐藤花子,パーマ,鈴木スタイリスト,12000,アレルギー確認済み`

  res.setHeader('Content-Type', 'text/csv; charset=utf-8')
  res.setHeader('Content-Disposition', 'attachment; filename="reservation_template.csv"')
  res.send('\uFEFF' + template) // BOM付きでExcelでの文字化け防止
})

// メール解析エンドポイント
router.post('/email/parse', async (req, res) => {
  try {
    const { subject, body, senderEmail } = req.body

    if (!subject || !body) {
      return res.status(400).json({ error: '件名と本文は必須です' })
    }

    const parsed = parseReservationEmail(subject, body, senderEmail)
    
    if (!parsed) {
      return res.status(400).json({ 
        error: 'ホットペッパービューティーの予約確認メールではありません',
        details: '対応していないメール形式です'
      })
    }

    // 重複チェック
    const existing = await prisma.reservation.findFirst({
      where: {
        startTime: parsed.startTime,
        customerName: parsed.customerName
      }
    })

    if (existing) {
      return res.status(409).json({
        error: '重複する予約が見つかりました',
        existing: existing
      })
    }

    // データベースに保存
    const reservation = await prisma.reservation.create({
      data: {
        ...parsed,
        tenantId: 'demo-tenant-1' // デモ用
      }
    })

    res.json({
      success: true,
      message: 'メールから予約情報を取り込みました',
      reservation: reservation,
      parsed: parsed
    })

  } catch (error) {
    console.error('Email Parse Error:', error)
    res.status(500).json({
      error: 'メール解析中にエラーが発生しました',
      details: error.message
    })
  }
})

// サンプルメール解析テスト
router.get('/email/test', async (req, res) => {
  try {
    const parsed = parseHotpepperSampleEmail()
    
    res.json({
      success: true,
      message: 'サンプルメール解析テスト',
      parsed: parsed,
      explanation: {
        customerName: '抽出された顧客名',
        startTime: '解析された予約日時',
        menuContent: '抽出されたメニュー内容',
        phone: '抽出された電話番号',
        email: '抽出されたメールアドレス'
      }
    })
  } catch (error) {
    res.status(500).json({
      error: 'サンプルメール解析に失敗しました',
      details: error.message
    })
  }
})

export default router