import { Request, Response, NextFunction } from 'express';
import Redis from 'ioredis';
import { logger } from '../utils/logger';

// RedisÊé•Á∂öË®≠ÂÆö
const redis = new Redis({
  host: process.env.REDIS_HOST || 'localhost',
  port: parseInt(process.env.REDIS_PORT || '6379'),
  password: process.env.REDIS_PASSWORD,
  db: parseInt(process.env.REDIS_DB || '0'),
  enableReadyCheck: false,
  maxRetriesPerRequest: 3,
  lazyConnect: true
});

// RedisÊé•Á∂öÁä∂ÊÖã„ÅÆÁõ£Ë¶ñ
redis.on('connect', () => {
  logger.info('üíæ ÁæéÂÆπÂÆ§„Ç≠„É£„ÉÉ„Ç∑„É•„Ç∑„Çπ„ÉÜ„É†Êé•Á∂öÈñãÂßã');
});

redis.on('ready', () => {
  logger.info('‚ú® ÁæéÂÆπÂÆ§„Ç≠„É£„ÉÉ„Ç∑„É•„Ç∑„Çπ„ÉÜ„É†Ê∫ñÂÇôÂÆå‰∫Ü - È´òÈÄü„É¨„Çπ„Éù„É≥„ÇπÈñãÂßãÔºÅ');
});

redis.on('error', (err) => {
  logger.error('üö® ÁæéÂÆπÂÆ§„Ç≠„É£„ÉÉ„Ç∑„É•„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº:', err);
});

redis.on('close', () => {
  logger.warn('‚ö†Ô∏è ÁæéÂÆπÂÆ§„Ç≠„É£„ÉÉ„Ç∑„É•„Ç∑„Çπ„ÉÜ„É†Êé•Á∂öÁµÇ‰∫Ü');
});

export interface CacheOptions {
  duration?: number; // „Ç≠„É£„ÉÉ„Ç∑„É•ÊúüÈñìÔºàÁßíÔºâ
  keyPrefix?: string; // „Ç≠„Éº„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ
  skipCache?: boolean; // „Ç≠„É£„ÉÉ„Ç∑„É•„Çí„Çπ„Ç≠„ÉÉ„Éó
  varyBy?: string[]; // „Ç≠„É£„ÉÉ„Ç∑„É•„Ç≠„Éº„ÅÆ„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥
}

/**
 * üöÄ ÁæéÂÆπÂÆ§„Çπ„Çø„ÉÉ„Éï„ÅåÊÑüÂãï„Åô„ÇãË∂ÖÈ´òÈÄü„Ç≠„É£„ÉÉ„Ç∑„É•„Éü„Éâ„É´„Ç¶„Çß„Ç¢
 * È°ßÂÆ¢ÂàÜÊûê„ÄÅ‰∫àÁ¥ÑÊ§úÁ¥¢„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæó„ÇíÁû¨ÈñìË°®Á§∫
 */
export const cacheMiddleware = (options: CacheOptions = {}) => {
  const {
    duration = 300, // „Éá„Éï„Ç©„É´„Éà5ÂàÜ
    keyPrefix = 'salon',
    skipCache = false,
    varyBy = ['tenantId']
  } = options;

  return async (req: Request, res: Response, next: NextFunction) => {
    // „Ç≠„É£„ÉÉ„Ç∑„É•„Çπ„Ç≠„ÉÉ„ÉóÊù°‰ª∂
    if (skipCache || req.method !== 'GET') {
      return next();
    }

    try {
      // „Ç≠„É£„ÉÉ„Ç∑„É•„Ç≠„ÉºÁîüÊàê
      const cacheKey = generateCacheKey(req, keyPrefix, varyBy);
      
      // „Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂèñÂæóË©¶Ë°å
      const cached = await redis.get(cacheKey);
      
      if (cached) {
        // üéØ „Ç≠„É£„ÉÉ„Ç∑„É•„Éí„ÉÉ„Éà - ÁæéÂÆπÂÆ§„Çπ„Çø„ÉÉ„Éï„Å´Áû¨Èñì„É¨„Çπ„Éù„É≥„ÇπÔºÅ
        logger.info(`‚ö° „Ç≠„É£„ÉÉ„Ç∑„É•„Éí„ÉÉ„Éà: ${cacheKey} - Áû¨Èñì„É¨„Çπ„Éù„É≥„ÇπÊèê‰æõÔºÅ`);
        
        const data = JSON.parse(cached);
        return res.json({
          ...data,
          _cached: true,
          _cacheHit: new Date().toISOString()
        });
      }

      // „Ç≠„É£„ÉÉ„Ç∑„É•„Éü„Çπ - „É¨„Çπ„Éù„É≥„Çπ„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò
      const originalJson = res.json;
      res.json = function(data: any) {
        // ÊàêÂäü„É¨„Çπ„Éù„É≥„Çπ„ÅÆ„Åø„Ç≠„É£„ÉÉ„Ç∑„É•
        if (res.statusCode >= 200 && res.statusCode < 300) {
          redis.setex(cacheKey, duration, JSON.stringify(data))
            .then(() => {
              logger.info(`üíæ „Ç≠„É£„ÉÉ„Ç∑„É•‰øùÂ≠ò: ${cacheKey} (${duration}Áßí)`);
            })
            .catch((err) => {
              logger.error('„Ç≠„É£„ÉÉ„Ç∑„É•‰øùÂ≠ò„Ç®„É©„Éº:', err);
            });
        }
        
        return originalJson.call(this, {
          ...data,
          _cached: false,
          _cacheSaved: new Date().toISOString()
        });
      };

      next();
    } catch (error) {
      // „Ç≠„É£„ÉÉ„Ç∑„É•„Ç®„É©„Éº„Åß„ÇÇ„Çµ„Éº„Éì„ÇπÁ∂ôÁ∂ö
      logger.error('„Ç≠„É£„ÉÉ„Ç∑„É•„Éü„Éâ„É´„Ç¶„Çß„Ç¢„Ç®„É©„Éº:', error);
      next();
    }
  };
};

/**
 * ÁæéÂÆπÂÆ§Ê•≠Âãô„Å´ÁâπÂåñ„Åó„Åü„Ç≠„É£„ÉÉ„Ç∑„É•„Ç≠„ÉºÁîüÊàê
 */
function generateCacheKey(req: Request, prefix: string, varyBy: string[]): string {
  const baseKey = `${prefix}:${req.route?.path || req.path}`;
  
  const variations = varyBy.map(key => {
    const value = req.query[key] || req.params[key] || req.headers[key];
    return `${key}:${value}`;
  }).join(':');
  
  return `${baseKey}:${variations}`;
}

/**
 * üóÇÔ∏è ÁæéÂÆπÂÆ§Ê•≠ÂãôÂà•„Ç≠„É£„ÉÉ„Ç∑„É•Êà¶Áï•
 */
export const SalonCacheStrategies = {
  // È°ßÂÆ¢‰∏ÄË¶ß - 15ÂàÜ„Ç≠„É£„ÉÉ„Ç∑„É•ÔºàÈ†ªÁπÅ„Å´ÂèÇÁÖß„ÄÅ„ÅÇ„Åæ„ÇäÂ§âÊõ¥„Åï„Çå„Å™„ÅÑÔºâ
  customerList: cacheMiddleware({
    duration: 900, // 15ÂàÜ
    keyPrefix: 'customers',
    varyBy: ['tenantId', 'page', 'limit', 'search']
  }),

  // ÂàÜÊûê„Éá„Éº„Çø - 1ÊôÇÈñì„Ç≠„É£„ÉÉ„Ç∑„É•ÔºàÈáç„ÅÑÂá¶ÁêÜ„ÄÅ„É™„Ç¢„É´„Çø„Ç§„É†ÊÄß„ÅØÈáçË¶Å„Åß„Å™„ÅÑÔºâ
  analytics: cacheMiddleware({
    duration: 3600, // 1ÊôÇÈñì
    keyPrefix: 'analytics',
    varyBy: ['tenantId', 'period', 'segment']
  }),

  // ‰∫àÁ¥Ñ„Ç´„É¨„É≥„ÉÄ„Éº - 5ÂàÜ„Ç≠„É£„ÉÉ„Ç∑„É•Ôºà„É™„Ç¢„É´„Çø„Ç§„É†ÊÄßÈáçË¶ÅÔºâ
  reservations: cacheMiddleware({
    duration: 300, // 5ÂàÜ
    keyPrefix: 'reservations',
    varyBy: ['tenantId', 'date', 'staffId']
  }),

  // „É°„ÉÉ„Çª„Éº„Ç∏‰∏ÄË¶ß - 2ÂàÜ„Ç≠„É£„ÉÉ„Ç∑„É•ÔºàÊúÄÊñ∞ÊÄßÈáçË¶ÅÔºâ
  messages: cacheMiddleware({
    duration: 120, // 2ÂàÜ
    keyPrefix: 'messages',
    varyBy: ['tenantId', 'status', 'channel']
  }),

  // „Çπ„Çø„ÉÉ„Éï„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ - 6ÊôÇÈñì„Ç≠„É£„ÉÉ„Ç∑„É•ÔºàÊó•Ê¨°Êõ¥Êñ∞Ôºâ
  staffPerformance: cacheMiddleware({
    duration: 21600, // 6ÊôÇÈñì
    keyPrefix: 'staff-performance',
    varyBy: ['tenantId', 'month']
  }),

  // È°ßÂÆ¢„Éó„É™„Éï„Ç°„É¨„É≥„Çπ - 30ÂàÜ„Ç≠„É£„ÉÉ„Ç∑„É•
  customerPreferences: cacheMiddleware({
    duration: 1800, // 30ÂàÜ
    keyPrefix: 'preferences',
    varyBy: ['tenantId', 'customerId']
  })
};

/**
 * üßπ ÁæéÂÆπÂÆ§ÁµÇÊ•≠ÊôÇ„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
 */
export const endOfDayCacheCleanup = async (tenantId: string) => {
  try {
    logger.info(`üåô ${tenantId} - ‰∏ÄÊó•„ÅÆÁµÇ„Çè„Çä„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñãÂßã`);
    
    const patterns = [
      `salon:*:tenantId:${tenantId}*`,
      `customers:*:tenantId:${tenantId}*`,
      `messages:*:tenantId:${tenantId}*`,
      `reservations:*:tenantId:${tenantId}*`
    ];

    let totalDeleted = 0;
    
    for (const pattern of patterns) {
      const keys = await redis.keys(pattern);
      if (keys.length > 0) {
        const deleted = await redis.del(...keys);
        totalDeleted += deleted;
        logger.info(`  ‚ú® ${pattern}: ${deleted}‰ª∂ÂâäÈô§`);
      }
    }

    logger.info(`üéâ „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü: ÂêàË®à${totalDeleted}‰ª∂ÂâäÈô§`);
    
    return {
      success: true,
      deletedCount: totalDeleted,
      message: '‰ªäÊó•„ÇÇ‰∏ÄÊó•„ÅäÁñ≤„ÇåÊßò„Åß„Åó„ÅüÔºÅ„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åó„Åæ„Åó„Åü'
    };
  } catch (error) {
    logger.error('„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
};

/**
 * üî• Á∑äÊÄ•ÊôÇ„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„Éë„Éº„Ç∏
 */
export const emergencyCachePurge = async (tenantId?: string) => {
  try {
    logger.warn('üö® Á∑äÊÄ•„Ç≠„É£„ÉÉ„Ç∑„É•„Éë„Éº„Ç∏ÂÆüË°å');
    
    if (tenantId) {
      // ÁâπÂÆö„ÉÜ„Éä„É≥„Éà„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ„ÅøÂâäÈô§
      const pattern = `*tenantId:${tenantId}*`;
      const keys = await redis.keys(pattern);
      
      if (keys.length > 0) {
        await redis.del(...keys);
        logger.info(`‚ö° „ÉÜ„Éä„É≥„Éà${tenantId}„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•${keys.length}‰ª∂„ÇíÁ∑äÊÄ•ÂâäÈô§`);
      }
    } else {
      // ÂÖ®„Ç≠„É£„ÉÉ„Ç∑„É•ÂâäÈô§
      await redis.flushdb();
      logger.warn('üî• ÂÖ®„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÁ∑äÊÄ•ÂâäÈô§„Åó„Åæ„Åó„Åü');
    }

    return { success: true, message: 'Á∑äÊÄ•„Ç≠„É£„ÉÉ„Ç∑„É•„Éë„Éº„Ç∏ÂÆå‰∫Ü' };
  } catch (error) {
    logger.error('Á∑äÊÄ•„Ç≠„É£„ÉÉ„Ç∑„É•„Éë„Éº„Ç∏„Ç®„É©„Éº:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
};

/**
 * üìä „Ç≠„É£„ÉÉ„Ç∑„É•Áµ±Ë®àÊÉÖÂ†±
 */
export const getCacheStats = async () => {
  try {
    const info = await redis.info('memory');
    const stats = await redis.info('stats');
    
    return {
      memory: {
        used: extractInfoValue(info, 'used_memory_human'),
        peak: extractInfoValue(info, 'used_memory_peak_human'),
        rss: extractInfoValue(info, 'used_memory_rss_human')
      },
      stats: {
        totalCommands: extractInfoValue(stats, 'total_commands_processed'),
        hitRate: calculateHitRate(stats),
        keyspace: await redis.dbsize()
      },
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    logger.error('„Ç≠„É£„ÉÉ„Ç∑„É•Áµ±Ë®àÂèñÂæó„Ç®„É©„Éº:', error);
    return null;
  }
};

// „Éò„É´„Éë„ÉºÈñ¢Êï∞
function extractInfoValue(info: string, key: string): string {
  const match = info.match(new RegExp(`${key}:(.+)`));
  return match ? match[1].trim() : 'N/A';
}

function calculateHitRate(stats: string): string {
  const hits = extractInfoValue(stats, 'keyspace_hits');
  const misses = extractInfoValue(stats, 'keyspace_misses');
  
  if (hits === 'N/A' || misses === 'N/A') return 'N/A';
  
  const totalRequests = parseInt(hits) + parseInt(misses);
  if (totalRequests === 0) return '0%';
  
  const hitRate = (parseInt(hits) / totalRequests) * 100;
  return `${hitRate.toFixed(2)}%`;
}

export { redis };
export default SalonCacheStrategies;