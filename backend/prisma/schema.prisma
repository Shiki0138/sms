// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// テナント（店舗）- 美容室業務最適化インデックス付き
model Tenant {
  id          String   @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  plan        String   @default("light") // light, standard, premium_ai
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  staff        Staff[]
  customers    Customer[]
  threads      MessageThread[]
  reservations Reservation[]
  templates    Template[]
  auditLogs    AuditLog[]
  settings     TenantSetting[]
  tags         Tag[]
  autoMessageTemplates AutoMessageTemplate[]
  autoMessageLogs      AutoMessageLog[]
  menus                Menu[]
  menuCategories       MenuCategory[]
  menuHistory          MenuHistory[]
  recommendations      MenuRecommendation[]
  notifications        Notification[]
  analyticsMetrics     AnalyticsMetric[]
  predictionData       PredictionData[]
  customerBehaviors    CustomerBehavior[]
  loginHistory         LoginHistory[]
  securityEvents       SecurityEvent[]
  customerPreferences  CustomerPreference[]
  marketingCampaigns   MarketingCampaign[]
  staffPerformance     StaffPerformance[]
  payments             Payment[]
  subscription         Subscription?
  invoices             Invoice[]
  feedback             Feedback[]
  quickRatings         QuickRating[]
  tenantFeatureFlags   TenantFeatureFlag[]

  // 💫 美容室業務高速化インデックス
  @@index([isActive]) // アクティブ店舗検索最適化
  @@index([plan, isActive]) // プラン別検索最適化
  @@map("tenants")
}

// テナント設定
model TenantSetting {
  id       String @id @default(cuid())
  tenantId String
  key      String
  value    String
  
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, key])
  @@map("tenant_settings")
}

// スタッフ
model Staff {
  id           String    @id @default(cuid())
  email        String    @unique
  password     String
  name         String
  role         String    @default("STAFF") // ADMIN, MANAGER, STAFF
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  tenantId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // 2FA関連
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  backupCodes      String? // JSON配列形式
  
  // セッション管理
  refreshTokens    RefreshToken[]
  
  // セキュリティ
  loginAttempts    Int      @default(0)
  lockedUntil      DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?

  // Relations
  tenant                  Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedThreads         MessageThread[] @relation("AssignedStaff")
  sentMessages            Message[]
  handledReservations     Reservation[]   @relation("HandledBy")
  createdTemplates        Template[]
  auditLogs               AuditLog[]
  notifications           Notification[]
  loginHistory            LoginHistory[] @relation("LoginHistory")
  securityEvents          SecurityEvent[] @relation("SecurityEvents")
  staffPerformance        StaffPerformance[]
  preferredByCustomers    Customer[] @relation("PreferredStaff")

  @@map("staff")
}

// enum StaffRole {
//   ADMIN
//   MANAGER
//   STAFF
// }
// SQLite doesn't support enums, using String instead

// 顧客 - 美容室スタッフの心を読む超高速検索対応
model Customer {
  id              String    @id @default(cuid())
  name            String?
  nameKana        String?
  gender          String? // MALE, FEMALE, OTHER
  birthDate       DateTime?
  phone           String?
  email           String?
  address         String?
  instagramId     String?   @unique
  lineId          String?   @unique
  firstVisitDate  DateTime?
  lastVisitDate   DateTime?
  visitCount      Int       @default(0)
  totalSpent      Decimal?  @default(0)
  notes           String?
  segment         String?   // VIP, REGULAR, NEW, CHURNED
  lifetimeValue   Decimal?  @default(0)
  riskScore       Int?      @default(0)
  preferredStaffId String?
  tenantId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  tenant       Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  threads      MessageThread[]
  reservations Reservation[]
  customerTags CustomerTag[]
  autoMessageLogs AutoMessageLog[]
  menuHistory  MenuHistory[]
  recommendations MenuRecommendation[]
  notifications Notification[]
  customerBehavior CustomerBehavior?
  customerPreferences CustomerPreference[]
  preferredStaff Staff? @relation("PreferredStaff", fields: [preferredStaffId], references: [id], onDelete: SetNull)

  // 💝 美容室スタッフが感動する高速顧客検索インデックス
  @@index([tenantId]) // 店舗別顧客一覧の瞬間表示
  @@index([tenantId, name]) // 名前検索の電光石火対応
  @@index([tenantId, phone]) // 電話番号検索の即座対応
  @@index([tenantId, email]) // メールアドレス検索の高速化
  @@index([tenantId, lastVisitDate]) // 最終来店日順ソートの最適化
  @@index([tenantId, visitCount]) // リピーター順表示の高速化
  @@index([tenantId, createdAt]) // 新規顧客順表示の最適化
  @@index([instagramId]) // Instagram連携の瞬間検索
  @@index([lineId]) // LINE連携の瞬間検索
  @@index([tenantId, birthDate]) // 誕生日月検索の高速化
  @@map("customers")
}

// enum Gender {
//   MALE
//   FEMALE
//   OTHER
// }
// SQLite doesn't support enums, using String instead

// タグ
model Tag {
  id          String @id @default(cuid())
  name        String
  color       String @default("#3B82F6")
  type        String // CUSTOMER, THREAD
  tenantId    String
  createdAt   DateTime @default(now())

  // Relations
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerTags CustomerTag[]
  threadTags   ThreadTag[]

  @@unique([tenantId, name, type])
  @@map("tags")
}

// enum TagType {
//   CUSTOMER
//   THREAD
// }
// SQLite doesn't support enums, using String instead

// 顧客タグの中間テーブル
model CustomerTag {
  customerId String
  tagId      String
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([customerId, tagId])
  @@map("customer_tags")
}

// メッセージスレッド - 美容室スタッフの心に響く高速メッセージ管理
model MessageThread {
  id                String            @id @default(cuid())
  customerId        String?
  channel           String // INSTAGRAM, LINE
  channelThreadId   String            // Instagram thread ID or LINE user ID
  assignedStaffId   String?
  status            String            @default("OPEN") // OPEN, IN_PROGRESS, CLOSED
  aiAnalyzed        Boolean           @default(false)
  sentimentScore    Float?            // -1.0 to 1.0
  priorityLevel     Int               @default(3) // 1=high, 2=medium, 3=low
  autoReplyEnabled  Boolean           @default(true)
  tenantId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer      Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull)
  assignedStaff Staff?      @relation("AssignedStaff", fields: [assignedStaffId], references: [id], onDelete: SetNull)
  messages      Message[]
  threadTags    ThreadTag[]

  // 💌 美容室スタッフが愛するメッセージ管理高速化インデックス
  @@unique([tenantId, channel, channelThreadId])
  @@index([tenantId]) // 店舗別メッセージ一覧の瞬間表示
  @@index([tenantId, status]) // 対応状況別表示の高速化
  @@index([tenantId, assignedStaffId]) // 担当者別メッセージの電光石火表示
  @@index([tenantId, customerId]) // 顧客別メッセージ履歴の即座表示
  @@index([tenantId, channel]) // チャネル別表示の最適化
  @@index([tenantId, createdAt]) // 時系列表示の高速化
  @@index([tenantId, updatedAt]) // 最終更新順表示の最適化
  @@index([status, updatedAt]) // 未対応メッセージ優先表示
  @@map("message_threads")
}

// enum MessageChannel {
//   INSTAGRAM
//   LINE
// }
// enum ThreadStatus {
//   OPEN
//   IN_PROGRESS
//   CLOSED
// }
// SQLite doesn't support enums, using String instead

// スレッドタグの中間テーブル
model ThreadTag {
  threadId  String
  tagId     String
  createdAt DateTime @default(now())

  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  tag    Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([threadId, tagId])
  @@map("thread_tags")
}

// メッセージ
model Message {
  id           String      @id @default(cuid())
  threadId     String
  senderId     String?     // Staff ID if sent by staff, null if sent by customer
  senderType   String // CUSTOMER, STAFF
  content      String
  mediaType    String      @default("TEXT") // TEXT, IMAGE, STICKER, FILE
  mediaUrl     String?
  externalId   String?     // External platform message ID
  isRead       Boolean     @default(false)
  createdAt    DateTime    @default(now())

  // Relations
  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender Staff?        @relation(fields: [senderId], references: [id], onDelete: SetNull)

  @@map("messages")
}

// enum SenderType {
//   CUSTOMER
//   STAFF
// }
// enum MediaType {
//   TEXT
//   IMAGE
//   STICKER
//   FILE
// }
// SQLite doesn't support enums, using String instead

// 予約
model Reservation {
  id            String            @id @default(cuid())
  startTime     DateTime
  endTime       DateTime?
  menuContent   String?
  customerName  String?           // Hot Pepper などの場合、Customer と紐付かない場合もある
  customerId    String?
  customerPhone String?
  customerEmail String?
  staffId       String?
  source        String // HOTPEPPER, GOOGLE_CALENDAR, PHONE, WALK_IN, MANUAL
  sourceId      String?           // External system ID
  status        String            @default("CONFIRMED") // TENTATIVE, CONFIRMED, COMPLETED, CANCELLED, NO_SHOW
  notes         String?
  totalAmount   Decimal?          @default(0)
  estimatedDuration Int?           // in minutes
  profitMargin  Decimal?          // percentage
  weatherImpact String?           // SUNNY, RAINY, CLOUDY, etc.
  sourceCampaign String?          // marketing campaign reference
  tenantId      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  nextVisitDate     DateTime?
  reminderSentAt    DateTime?
  followUpSentAt    DateTime?
  
  // 施術写真
  beforePhotos      String?           // JSON array of before photo URLs
  afterPhotos       String?           // JSON array of after photo URLs
  stylistNotes      String?           // 美容師メモ

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  staff    Staff?    @relation("HandledBy", fields: [staffId], references: [id], onDelete: SetNull)
  autoMessageLogs AutoMessageLog[]

  // 📅 美容室スタッフが時間の魔法使いになる予約管理高速化インデックス
  @@index([tenantId]) // 店舗別予約一覧の瞬間表示
  @@index([tenantId, startTime]) // 日付別予約表示の電光石火対応
  @@index([tenantId, status]) // 予約状況別表示の高速化
  @@index([tenantId, staffId]) // スタッフ別予約の即座表示
  @@index([tenantId, customerId]) // 顧客別予約履歴の瞬間表示
  @@index([tenantId, startTime, status]) // 日付×状況複合検索の最適化
  @@index([tenantId, staffId, startTime]) // スタッフスケジュール表示の高速化
  @@index([startTime, endTime]) // 時間範囲検索の最適化
  @@index([status, startTime]) // 今日の予約状況の高速表示
  @@index([tenantId, source]) // 予約経路別分析の最適化
  @@index([tenantId, nextVisitDate]) // 次回予約提案の高速化
  @@index([reminderSentAt]) // リマインダー送信管理の最適化
  @@map("reservations")
}

// enum ReservationSource {
//   HOTPEPPER
//   GOOGLE_CALENDAR
//   PHONE
//   WALK_IN
//   MANUAL
// }
// enum ReservationStatus {
//   TENTATIVE
//   CONFIRMED
//   COMPLETED
//   CANCELLED
//   NO_SHOW
// }
// SQLite doesn't support enums, using String instead

// テンプレート
model Template {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String?
  createdById String
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy Staff  @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("templates")
}

// 監査ログ
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String?
  description String?
  staffId     String?
  ipAddress   String?
  userAgent   String?
  tenantId    String
  createdAt   DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  staff  Staff? @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// 自動メッセージテンプレート
model AutoMessageTemplate {
  id          String   @id @default(cuid())
  type        String   // REMINDER_1_WEEK, REMINDER_3_DAYS, FOLLOWUP_VISIT
  title       String
  content     String
  isActive    Boolean  @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, type])
  @@map("auto_message_templates")
}

// 自動メッセージ送信ログ
model AutoMessageLog {
  id              String   @id @default(cuid())
  reservationId   String?
  customerId      String
  templateType    String   // REMINDER_1_WEEK, REMINDER_3_DAYS, FOLLOWUP_VISIT
  channel         String   // LINE, INSTAGRAM, EMAIL
  messageContent  String
  status          String   // SENT, FAILED, SCHEDULED
  sentAt          DateTime?
  errorMessage    String?
  tenantId        String
  createdAt       DateTime @default(now())

  // Relations
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer    Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  reservation Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)

  @@map("auto_message_logs")
}

// メニューカテゴリー
model MenuCategory {
  id          String   @id @default(cuid())
  name        String
  displayOrder Int     @default(0)
  isActive    Boolean  @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  menus  Menu[]

  @@unique([tenantId, name])
  @@map("menu_categories")
}

// メニュー
model Menu {
  id           String   @id @default(cuid())
  name         String
  description  String?
  price        Int      // 円単位
  duration     Int      // 分単位
  categoryId   String
  isActive     Boolean  @default(true)
  displayOrder Int      @default(0)
  tenantId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // AI推奨用データ
  popularity     Int @default(0) // 人気度スコア
  seasonality    String? // SPRING, SUMMER, AUTUMN, WINTER, ALL
  ageGroup       String? // TEENS, TWENTIES, THIRTIES, FORTIES_PLUS, ALL
  genderTarget   String? // MALE, FEMALE, ALL

  // Relations
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category       MenuCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  menuHistory    MenuHistory[]
  recommendations MenuRecommendation[]

  @@map("menus")
}

// 顧客メニュー履歴
model MenuHistory {
  id          String   @id @default(cuid())
  customerId  String
  menuId      String
  visitDate   DateTime
  satisfaction Int?    // 1-5 満足度スコア
  notes       String?
  tenantId    String
  createdAt   DateTime @default(now())

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  menu     Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("menu_history")
}

// AIメニュー推奨
model MenuRecommendation {
  id         String   @id @default(cuid())
  customerId String
  menuId     String
  tenantId   String
  score      Float    // 0.0-1.0 推奨スコア
  reasoning  String   // 推奨理由
  factors    String   // JSON形式で推奨要因データ
  createdAt  DateTime @default(now())
  expiresAt  DateTime // 推奨の有効期限

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  menu     Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("menu_recommendations")
}

// 通知
model Notification {
  id         String   @id @default(cuid())
  type       String   // NEW_MESSAGE, RESERVATION_CHANGE, URGENT_ALERT, SYSTEM_NOTIFICATION
  title      String
  message    String
  tenantId   String
  staffId    String?
  customerId String?
  metadata   String?  // JSON形式でメタデータ保存
  priority   String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  isRead     Boolean  @default(false)
  readAt     DateTime?
  createdAt  DateTime @default(now())

  // Relations
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  staff    Staff?     @relation(fields: [staffId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@index([tenantId, isRead])
  @@index([staffId, isRead])
  @@map("notifications")
}

// 分析メトリクス
model AnalyticsMetric {
  id        String   @id @default(cuid())
  tenantId  String
  metricKey String   // revenue_daily, customers_new, reservations_count, etc.
  value     Float
  date      DateTime
  metadata  String?  // JSON形式で詳細データ
  createdAt DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, metricKey, date])
  @@index([tenantId, metricKey])
  @@index([date])
  @@map("analytics_metrics")
}

// 予測データ
model PredictionData {
  id           String   @id @default(cuid())
  tenantId     String
  predictionType String // revenue_forecast, customer_churn, demand_forecast
  targetDate   DateTime
  predictedValue Float
  confidence   Float    // 0.0-1.0 信頼度
  actualValue  Float?   // 後から実績値を記録
  features     String   // JSON形式で予測に使用した特徴量
  modelVersion String   @default("v1.0")
  createdAt    DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, predictionType, targetDate, modelVersion])
  @@index([tenantId, predictionType])
  @@index([targetDate])
  @@map("prediction_data")
}

// 顧客行動分析
model CustomerBehavior {
  id                String   @id @default(cuid())
  customerId        String
  tenantId          String
  lastVisitDate     DateTime?
  visitFrequency    Float?   // 平均来店間隔（日）
  averageSpending   Float?   // 平均客単価
  preferredTimeSlot String?  // 好みの時間帯
  churnProbability  Float?   // 0.0-1.0 離脱確率
  lifetimeValue     Float?   // 顧客生涯価値
  riskScore         Float?   // 0.0-1.0 リスクスコア
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([customerId])
  @@index([tenantId, churnProbability])
  @@index([tenantId, lifetimeValue])
  @@map("customer_behaviors")
}

// リフレッシュトークン
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  staffId   String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  
  // デバイス情報
  userAgent String?
  ipAddress String?
  
  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// ログイン履歴
model LoginHistory {
  id         String   @id @default(cuid())
  staffId    String?
  tenantId   String
  email      String
  success    Boolean
  ipAddress  String?
  userAgent  String?
  failReason String?
  createdAt  DateTime @default(now())
  
  // Relations
  staff  Staff?  @relation("LoginHistory", fields: [staffId], references: [id], onDelete: SetNull)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([staffId])
  @@index([tenantId, createdAt])
  @@map("login_history")
}

// セキュリティイベント
model SecurityEvent {
  id          String   @id @default(cuid())
  tenantId    String
  staffId     String?
  eventType   String   // LOGIN_FAILED, ACCOUNT_LOCKED, PASSWORD_RESET, 2FA_ENABLED, etc.
  description String
  ipAddress   String?
  userAgent   String?
  metadata    String?  // JSON形式
  severity    String   @default("INFO") // INFO, WARNING, CRITICAL
  createdAt   DateTime @default(now())
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  staff  Staff? @relation("SecurityEvents", fields: [staffId], references: [id], onDelete: SetNull)
  
  @@index([tenantId, severity])
  @@index([eventType])
  @@map("security_events")
}

// 顧客設定・好み
model CustomerPreference {
  id         Int      @id @default(autoincrement())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // 設定項目
  preferredStaff    String?
  preferredTime     String?  // "morning", "afternoon", "evening"
  preferredDay      String?  // "monday", "tuesday", etc.
  communicationPref String   @default("LINE") // "LINE", "EMAIL", "SMS"
  
  // メニュー好み
  favoriteServices  String?  // JSON array
  avoidServices     String?  // JSON array
  
  // その他
  notes            String?
  lastUpdated      DateTime @default(now())
  
  @@unique([customerId, tenantId])
  @@map("customer_preferences")
}

// マーケティングキャンペーン
model MarketingCampaign {
  id          Int      @id @default(autoincrement())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  type        String   // "EMAIL", "LINE", "SMS", "PROMOTION"
  status      String   @default("DRAFT") // "DRAFT", "ACTIVE", "COMPLETED", "CANCELLED"
  
  // ターゲティング
  targetSegment     String?  // JSON criteria
  targetCustomerIds String?  // JSON array of customer IDs
  
  // スケジュール
  scheduledAt    DateTime?
  startDate      DateTime?
  endDate        DateTime?
  
  // コンテンツ
  messageContent String
  subject        String?
  
  // 結果
  sentCount      Int @default(0)
  openCount      Int @default(0)
  clickCount     Int @default(0)
  responseCount  Int @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("marketing_campaigns")
}

// スタッフパフォーマンス
model StaffPerformance {
  id       Int      @id @default(autoincrement())
  staffId  String
  staff    Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  tenantId String
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // 期間
  month    Int      // 1-12
  year     Int
  
  // パフォーマンス指標
  totalReservations    Int @default(0)
  totalRevenue         Float @default(0)
  avgServiceTime       Float @default(0) // minutes
  customerSatisfaction Float @default(0) // 1-5 scale
  
  // 顧客関係
  newCustomers     Int @default(0)
  repeatCustomers  Int @default(0)
  referrals        Int @default(0)
  
  // 効率性
  utilizationRate  Float @default(0) // percentage
  noShowRate       Float @default(0) // percentage
  cancelRate       Float @default(0) // percentage
  
  // 成長
  skillRating      Float @default(0) // 1-5 scale
  trainingHours    Float @default(0)
  certifications   String? // JSON array
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([staffId, month, year])
  @@index([tenantId, year, month])
  @@map("staff_performance")
}

// 決済情報
model Payment {
  id                  String      @id @default(cuid())
  tenantId            String
  tenant              Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subscriptionId      String?
  subscription        Subscription? @relation(fields: [subscriptionId], references: [id])
  
  // 決済プロバイダー情報
  provider            String      // stripe, square, paypal, payjp
  providerPaymentId   String      // プロバイダー側の決済ID
  
  // 決済詳細
  amount              Float
  currency            String      @default("JPY")
  status              String      // pending, processing, succeeded, failed, canceled, refunded
  description         String?
  paymentMethodId     String
  failureReason       String?
  
  // メタデータ
  metadata            Json?
  
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  @@index([tenantId, status])
  @@index([provider, providerPaymentId])
  @@map("payments")
}

// サブスクリプション
model Subscription {
  id                     String      @id @default(cuid())
  tenantId               String      @unique
  tenant                 Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // プラン情報
  planType               String      // light, standard, premium_ai
  provider               String      // stripe, square, paypal, payjp
  providerSubscriptionId String      // プロバイダー側のサブスクリプションID
  
  // ステータス
  status                 String      // active, past_due, canceled, unpaid, trialing
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  cancelAtPeriodEnd      Boolean     @default(false)
  trialEnd               DateTime?
  
  // 決済情報
  paymentMethodId        String
  
  // リレーション
  payments               Payment[]
  invoices               Invoice[]
  
  // メタデータ
  metadata               Json?
  
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  
  @@index([status, currentPeriodEnd])
  @@index([provider, providerSubscriptionId])
  @@map("subscriptions")
}

// 請求書
model Invoice {
  id                  String       @id @default(cuid())
  tenantId            String
  tenant              Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subscriptionId      String
  subscription        Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  // プロバイダー情報
  provider            String
  providerInvoiceId   String
  
  // 請求詳細
  amount              Float
  currency            String       @default("JPY")
  status              String       // draft, open, paid, void, uncollectible
  
  // 期間
  periodStart         DateTime
  periodEnd           DateTime
  dueDate             DateTime
  paidAt              DateTime?
  
  // ダウンロード
  invoiceUrl          String?
  invoicePdf          String?
  
  // メタデータ
  metadata            Json?
  
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  
  @@index([tenantId, status])
  @@index([subscriptionId, status])
  @@index([provider, providerInvoiceId])
  @@map("invoices")
}

// Webhook イベント
model WebhookEvent {
  id          String   @id @default(cuid())
  provider    String   // stripe, square, paypal, payjp
  eventType   String
  eventId     String   // プロバイダー側のイベントID
  data        Json
  processed   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([provider, processed])
  @@index([eventType, processed])
  @@unique([provider, eventId])
  @@map("webhook_events")
}

// フィードバック
model Feedback {
  id          String   @id @default(cuid())
  type        String   // bug, feature, general
  title       String
  description String
  severity    String?  // low, medium, high, critical (for bugs)
  category    String?
  screenshot  String?
  rating      Int?     // 1-5 (for general feedback)
  status      String   @default("open") // open, in-progress, resolved, closed
  
  // User info
  userId      String?
  userEmail   String?
  userName    String?
  tenantId    String?
  
  // Technical info
  userAgent   String?
  url         String?
  metadata    String?  // JSON
  
  // Admin fields
  adminNotes  String?
  resolvedAt  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tenant      Tenant? @relation(fields: [tenantId], references: [id])
  
  @@index([type, status])
  @@index([tenantId, createdAt])
  @@map("feedback")
}

// クイック評価
model QuickRating {
  id          String   @id @default(cuid())
  rating      Int      // 1-5
  userId      String?
  userEmail   String?
  tenantId    String?
  
  createdAt   DateTime @default(now())
  
  // Relations
  tenant      Tenant? @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId, createdAt])
  @@map("quick_ratings")
}

// ベータテスト申し込み
model BetaApplication {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  phone           String
  salonName       String
  salonType       String   // hair, beauty, nail, eyelash, barber, other
  numberOfStylists String  // 1, 2-5, 6-10, 11-20, 21+
  currentSoftware String?
  painPoints      String
  expectations    String
  availableHours  String   // 1-2, 3-5, 6-10, 11+
  referralSource  String?  // web-search, sns, referral, advertisement, other
  
  // Application status
  status          String   @default("pending") // pending, approved, rejected, in_review
  reviewNotes     String?
  reviewedAt      DateTime?
  
  // Metadata
  metadata        String?  // JSON
  submittedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status, submittedAt])
  @@index([salonType, submittedAt])
  @@map("beta_applications")
}

// フィーチャーフラグ（機能トグル）
model FeatureFlag {
  id          String   @id @default(cuid())
  key         String   @unique // 機能キー (e.g., "setup_wizard", "dashboard_customize", "mobile_view")
  name        String   // 表示名
  description String?  // 機能の説明
  category    String   // カテゴリ (core, enhancement, experimental, beta)
  
  // 機能の状態
  isEnabled   Boolean  @default(false) // グローバル有効/無効
  rolloutPercentage Int @default(0)   // ロールアウト率 (0-100)
  
  // 対象設定
  enabledTenants  String? // 特定のテナントIDで有効化 (JSON配列文字列)
  enabledPlans    String? // 特定のプランで有効化 (JSON配列文字列)
  
  // メタデータ
  config      String?  // JSON設定データ
  dependencies String? // 依存する他の機能フラグキー (JSON配列文字列)
  
  // リリース情報
  releaseDate DateTime? // リリース予定日
  deprecationDate DateTime? // 廃止予定日
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tenantFlags TenantFeatureFlag[]
  
  @@index([isEnabled, category])
  @@index([key])
  @@map("feature_flags")
}

// テナント別フィーチャーフラグ設定
model TenantFeatureFlag {
  id          String   @id @default(cuid())
  tenantId    String
  featureFlagId String
  
  // テナント別の上書き設定
  isEnabled   Boolean  @default(true)
  config      String?  // テナント固有の設定 (JSON)
  enabledAt   DateTime @default(now())
  
  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  featureFlag FeatureFlag @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, featureFlagId])
  @@index([tenantId, isEnabled])
  @@map("tenant_feature_flags")
}

