import { PrismaClient } from '@prisma/client';
import { FeatureFlagService } from '../src/services/featureFlagService';

const prisma = new PrismaClient();

async function setupFeatureFlags() {
  console.log('üöÄ Starting feature flags setup...');
  
  try {
    // 1. ÂàùÊúü„Éï„Ç£„Éº„ÉÅ„É£„Éº„Éï„É©„Ç∞„Çí‰ΩúÊàê
    console.log('üìã Creating initial feature flags...');
    await FeatureFlagService.setupInitialFeatureFlags();
    console.log('‚úÖ Initial feature flags created');

    // 2. Êú¨Áï™Áí∞Â¢ÉÂêë„ÅëË®≠ÂÆö„ÇíÈÅ©Áî®
    console.log('üîß Applying production settings...');
    await FeatureFlagService.setupProductionFlags();
    console.log('‚úÖ Production settings applied');

    // 3. Ë®≠ÂÆöÁµêÊûú„ÇíÁ¢∫Ë™ç
    console.log('üìä Verifying setup...');
    const allFlags = await FeatureFlagService.getAllFeatureFlags();
    console.log(`‚úÖ Total feature flags: ${allFlags.length}`);
    
    const enabledFlags = allFlags.filter(f => f.isEnabled);
    console.log(`‚úÖ Enabled feature flags: ${enabledFlags.length}`);
    
    const betaFlags = allFlags.filter(f => f.category === 'beta');
    console.log(`‚úÖ Beta feature flags: ${betaFlags.length}`);
    
    const premiumFlags = allFlags.filter(f => {
      const plans = f.enabledPlans ? JSON.parse(f.enabledPlans) : [];
      return plans.includes('premium_ai');
    });
    console.log(`‚úÖ Premium feature flags: ${premiumFlags.length}`);

    // 4. ÊÆµÈöéÁöÑ„É™„É™„Éº„ÇπÁä∂Ê≥Å„ÇíË°®Á§∫
    console.log('\nüìà Rollout Status:');
    const rolloutFlags = allFlags.filter(f => f.rolloutPercentage > 0 && f.rolloutPercentage < 100);
    rolloutFlags.forEach(flag => {
      console.log(`  - ${flag.name}: ${flag.rolloutPercentage}%`);
    });

    console.log('\nüéâ Feature flags setup completed successfully!');
    
    // 5. ÁÆ°ÁêÜËÄÖÂêë„Åë„ÅÆÊÉÖÂ†±
    console.log('\nüìù Next Steps:');
    console.log('1. Access admin dashboard to manage feature flags');
    console.log('2. Monitor rollout progress and user feedback');
    console.log('3. Gradually increase rollout percentages for stable features');
    console.log('4. Use beta features for early adopters');
    
  } catch (error) {
    console.error('‚ùå Error setting up feature flags:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

async function validateDependencies() {
  console.log('üîç Validating dependencies...');
  
  // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÁ¢∫Ë™ç
  try {
    await prisma.$connect();
    console.log('‚úÖ Database connection successful');
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
    return false;
  }

  // ÂøÖË¶Å„Å™„ÉÜ„Éº„Éñ„É´„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
  try {
    await prisma.featureFlag.findFirst();
    console.log('‚úÖ FeatureFlag table exists');
  } catch (error) {
    console.error('‚ùå FeatureFlag table not found. Run prisma migrate deploy first.');
    return false;
  }

  return true;
}

async function main() {
  console.log('üéØ Salon Management System - Feature Flags Setup');
  console.log('================================================\n');

  const isValid = await validateDependencies();
  if (!isValid) {
    console.log('\n‚ùå Dependency validation failed. Please fix the issues above.');
    process.exit(1);
  }

  await setupFeatureFlags();
}

// „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Unexpected error:', error);
    process.exit(1);
  });
}

export { setupFeatureFlags, validateDependencies };